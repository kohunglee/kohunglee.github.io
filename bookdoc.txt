第一章 前端技术概述
随着硬件算力和软件技术的进步，如今浏览器对网页的渲染质量已经可以媲美桌面级软件，且在多平台的呈现效果上也几乎一致，无论是 IOS 智能手机操作系统还是 Windows 计算机操作系统，无论是小如杯底的智能手表显示器还是大型 8k 高清显示屏，一套网页代码就几乎完美适配，效果丰富、质感迷人，跟过去十多年前比起可谓判若天渊。
互联网的普及使市场对 Web 应用的需求量不断增加，近年来，Web 前端技术迅猛发展，前沿各种精巧新奇、脑洞大开的概念层出不穷，有炫酷的、优雅的、有复杂的、高深的……它们吸引着无数年轻人前去探索，不断为这个圈子增添活力，推动着 Web 前端技术的发展。
（自从前后端分离以来，前端框架可谓是百花齐放，一片繁荣。）
当然 Web 前端技术前沿的学习必然有一定难度，但它的入门却相当简单，由于经常与图像打交道，所以我们的入门学习全程都会充满趣味，待初步掌握它后我们就会发现自己真的拥有了魔法，敲几行字母符号就能让浏览器显示我们以前只能在心里想象的画面和动作（就像人类当年发明了第一台机械四则运算计算器一样），若搭建一个服务器（或上传到一些免费的网页托管平台，如七牛云、Github page、Cloudflare）还能分享给天涯海角的小伙伴，届时我们无论是继续探索前端技术还是用它丰富业余生活，都会不断发现惊喜。
现在我们就开始学习 Web 前端技术的旅程！在第一章中我们会初步了解 Web 前端是什么，配置好它的学习环境，以及通过简单的例子体验 Web 前端开发的流程。
1.1 认识前端
小故事： 
1.1.1 Web 前端开发的内容
一言而喻，Web 前端开发（front-end）就是开发运行在浏览器上的网页。不过不是单纯写界面，而是像开发我们平时见到的电脑桌面端软件（如电脑上的 QQ）一样，有界面开发，还有界面背后的各种动作脚本的开发。随着时代的发展，我们每天上网浏览的网页，其实都算是很复杂的程序了。
网页有时可以是一个文件，一般网页文件的后缀名是“.html”，就像我们电脑上的音乐、视频，双击就会出现一个软件打开它。从本质上讲网页文件就是写着各种指令代码的文本数据，我们通过浏览器打开看到的即这些指令代码经过浏览器解析后生成的网页画面。
不过通常我们是以访问网站的形式见到网页画面，这是远方某个网站的服务器在接到我们的请求后通过“数据包”发给我们的，内容和上述网页文件一样，也是文本格式的指令代码。 编写这些指令代码就是前端程序员大部分的工作内容，这些指令代码也叫网页源代码。
现在我们来看一下网页源代码。使用浏览器打开 baidu.com ，按 Ctrl + U 或者右键选择 “查看源代码” ，此时浏览器会新开一个页面并显示很多 “不明觉厉” 的代码，如图1-1，这就是百度首页的网页源代码，也是浏览器在解析百度网页前网页的“本体”。




图1-1 百度页面的源代码

现在我们来更深入地认识一下这些代码，如图 1-2 所示是某个网页的部分源码截图。



图 1-2 某个网页的截图

源码一般可分为三大部分，分别是 HTML、CSS、JavaScript，这三者分别负责网页的结构、显示细节、动作。若把 Web 前端开发比作制作一个小机器，那 HTML 就是支架、肋板、外壳、CSS 是外壳上的颜色、花纹，而 JavaScript 是机器内部的齿轮、芯片、马达。
有其他编程背景的小伙伴应该对 JavaScript 部分感到有点熟悉，没错， JavaScript 就是专门为 Web 前端开发而设计的编程语言，或者说脚本语言（脚本语言就是不需要编译器就能运行的编程语言，开发效率高和可维护性强，但是运行速度慢于如 C++、Java 这类编译语言），可对网页中的数据进行逻辑运算，以及操作网页上的图片、线条等元素进行变化等，实现网页上如“计算器”、“游戏”中各种逻辑交互效果。 而 HTML 、CSS 则是一种标记结构语言（其实像后缀名为 png、bmp、mp4 等文件的内部也是一串“标记结构语言”，它们按一定规则和结构记录相应的数据），记录网页的外观上的所有细节的数据，可被渲染引擎直接对应生成一个图形化界面。
拿人类语言作对比，语言中有“因为”、“所以”、“若”等逻辑符号辅助我们思考和设计各种概念的部分，也有如“今天的天气是晴朗”、“河边有一只白色的天鹅”这种想办法通过一定秩序、结构记录各种信息的部分。JavaScript 对应着前者—通过逻辑构建应用的运行程序，HTML、CSS 对应着后者—将界面上的我们设计的各种显示信息通过某种书写结构记录到文本中。
1.1.2 “Web 前端”中的“前端”是什么
先了解一下网站的本质是什么？通常网站可理解为一个服务器上的一个程序，可以与我们进行数据交互，当然若我们单纯把“.html”后缀名的网页文件传到服务器上也可以说这是一个网站，这种网站的数据不会随用户的操作而改变，叫静态网页，而通常我们看到的网站是动态的，里面的数据是可通过我们的操作而动态变化（非网页动画效果），叫动态网页，它在服务器上的本体是一个运行中的软件，并如一个工厂一般，不断接受客户（网站访问者）的请求和附加数据，并经一定程序处理后生产新的网页返回给客户。
这个“幕后”的工厂是后端程序员建造的，“后端”和“前端”相互对应，是一个网站应用的开发通常分离的两部分。
若“后端”是工厂，那“前端”是什么呢？“前端”可看作是产品的模子。“后端”工厂套上不同的“前端”模子就能生产不同的网页产品。举个例子，比如某个问答网站，其实我们会发现这个网站中的问答界面网页外形都一样，只是问题、回答等数据变了，那么前端程序员就是设计、开发这个网页外形模子的开发者。

「图1-3 前后端示意图」

很早以前并没有 “前后端” 的概念，或者说只有后端程序员，因为当时网页指令比较简单，还不至于被分离成一个独立的部门去负责，写动态网页其实就是使用程序里的输出指令一行一行生成网页代码，管理数据的代码和网页的样式代码杂糅堆在一起。相较于今天，那种开发模式效率低下，产品也很难维护。
后来随着浏览器技术的发展，网页代码规则越来越复杂、网站的规模也越来越大，为了应对巨大复杂的开发业务，人们逐渐摸索出“前后端分离”的思想，这样开发业务的复杂度会大大降低，维护起来也很方便，尤其是“前端”、“后端”两部分可同时开发，节省不少时间。
当然“前后端思想”并不只用在网站应用开发上，如今在很多平台的客户端应用开发中也有，如安卓应用的工程师在开发时也流行界面独立于其他部分开发，其工作被称作“安卓前端开发”。
在所有种类的前端开发“部落圈子”中，“Web 前端开发”是最庞大和最活跃的，以至于在很多未加特殊声明的场景下，我们可直接认为 “前端” 就是指“ Web 前端”，比如招聘市场上，很多直接写招聘 “前端工程师” ，一般就是指的就是 “Web 前端工程师”。本书也默认“前端开发”为“Web 前端开发”。
1.2 准备工作
小故事：

“工欲善其事，必先利其器。” 我们了解一下学习前端开发的工作环境。
一般一台我们平常使用的电脑就已完备了前端开发的环境，因为电脑里会有记事本和浏览器，记事本可用于编写前端代码，浏览器可用于前端调试，但为了我们更好地学习，我们需要做进一步优化。
1.2.1 前端开发的工具
前端开发的工具分为以下几类：运行环境（浏览器）、代码编辑器、其他工具，目前我们只需前两者。
（1）运行环境（浏览器）
“前端开发” 是对产品兼容性有一定要求的工作，因为我们的页面会在很多浏览器中运行，而这些浏览器对相同代码的解析结果不一定相同，所以开发前最好多安装一些浏览器以方便调试。
一般我们会安装 Chrome 浏览器或 Fairfox 浏览器，根据需要也会用到 Windows 上的 IE 浏览器。
若进行移动网页页面开发，最好手边要能找到一台 Mac 系统的电脑，以使用 Safair 浏览器进行适当调试，因为苹果公司限制 IOS 系统中的浏览器只能使用 Safari 的浏览器内核，而移动设备用户中的 iPhone、iPad 用户占比接近 1/4 之多。
当然对于我们初学者也可先不考虑那么多，先安装个 Chrome 浏览器（www.google.cn/intl/zh-CN/chrome/） 来开始学习。目前 Chrome 浏览器的用户最多，很多国产浏览器也在使用它的 Chromium 内核，且它的“开发者工具”做得很好，所以我们优先考虑使用它进行代码调试工作。
（2）代码编辑器
我们写的各种程序一般都是文本文件，所谓代码编辑器其实就是“记事本”加强版，即在文本编辑功能基础上做了一些优化以更方便写代码，如“关键词高亮”、“代码补全”等，有人说编程学习初级阶段可选择简单的“无代码自动补全功能”型编辑器，以熟悉敲代码的感觉，比如“记事本”、“保持默认设置的 Notepad++ 代码编辑器”等，大家可根据自己的看法和爱好选择，笔者认为这个不要紧。笔者这里先介绍一下自己最常使用 VS Code （ https://code.visualstudio.com/ ）， 它由微软公司出品，功能很强大。
1.2.2 VS Code 的简单使用
VS Code 是一个免费的代码编辑器，也是目前用户量最大的代码编辑器，有着海量的插件以及优秀的使用体验，用户覆盖率极广，适合几乎所有编程语言的代码编写，比如 C/C++ 、Java 、Python、PHP、Go 等，也可用作文本编辑器和二进制编辑器，是一个全能型的编辑器选手，因为其拥有大量前端的插件，所以目前它也是被前端开发者使用最多的编辑器。
对于它的下载安装就不说了，笔者这里只说一下它最基础的使用，由于它的界面和操作逻辑相比其他大众型的软件，比较新颖，有些小伙伴第一次使用可能会“头晕”。

图 1-4 VS Code 软件界面（到时候重新截图）

首先是界面，如图1-4所示软件左侧有 6 个图标，自上到下分别是资源管理器、搜索、源代码管理、调试和运行、扩展和远程资源管理器，我们需要了解前两个，其他的之后用到再说。
（1）更改语言
点击软件左侧从上到下第 5 个图标打开扩展，在出现的列表上方的输入框中输入 Chinese 并回车，待 VS Code 联网搜索完后选择其结果第一个扩展应用，确定选择的是中文简体语言包，如图。。。，然后点击该应用右下角的 install 来安装。安装完后重启软件就更改为中文了。
（2）新建文件
启动软件后，点击欢迎界面的“新建文件”，页面会跳转到一个新页面，之后点击 “选择语言” ，在弹出的框中输入 “html” 然后回车，此时软件就会创建一个新的 HTML 文件。紧接着我们要先保存，在顶部菜单中找到保存（或按快捷键 Ctrl + S），然后找一个我们需要保存到的文件夹，输入我们的文件名，比如 “index.html”。
“index”的意思是索引。互联网早期时代，网站建设者一般会做一个“目录网页” 来为访客索引网站中的其他网页，命名为 index.html ，之后我们便习惯将网站的首页命名为 index.html。
当然我们也可先在电脑某个地方创建一个文件夹，再启动软件并点击软件欢迎界面的 “打开文件夹” 来打开刚创建的文件夹，接着在左侧的资源管理器里找到 “新建文件” 的图标，点击并输入 “index.html” 新建一个文件，推荐使用这个方式，因为我们之后可能会在同一个文件夹里新建很多文件。
（3）搜索和替换
据笔者经验，搜索和替换是编写代码时最常用的功能，我们会使用它们来查找一些关键字或者更换一些变量名。在 VS Code 中搜索功能分为两类，一类是在编辑页面搜索，一类是在打开的文件夹所有文件中搜索。
对于 “在编辑页面搜索” 我们可按快捷键 Ctrl + F 调出，填入关键字（要搜索的内容）编辑器就会自动高亮显示关键字，按键盘上的 Enter 键就可切换结果。在输入框左侧还有个三角，展开后是替换功能，上方填要替换的关键字，下方填替换后的关键字，第二个输入框后有两个按钮，分别是 “挨个替换”、全部替换，点击相应类型即可替换。若我们对要替换的关键字不放心，可选择“挨个去确认替换”。
「示意图 - 搜索示意和替换示意」
不过一些情况下我们需要在很多文件中搜索某个内容，可点左边的菜单栏上的 “放大镜” 图标，之后在打开的侧边栏中点击 “新建搜索编辑器” 按钮，此时会弹出新的编辑页面，在这个页面中最上面的框中输入关键字，VS Code 会自动将我们在打开的文件夹里对该关键词的搜索结果显示在下方。

「示意图 - 搜索」
（4）设置目录树缩进距离
使用过其他代码编辑器的小伙伴可能觉得 VS Code 左侧的目录树前后缩进很短，这个距离也可调整，点击【菜单栏】 -> 【文件】 -> 【首选项】，在设置页面最上方搜索“tree”找到“Tree: Indent”选项并将后面的值改大点，如“20”，这样就舒服多了。

「小示意图」
（5）编写、运行我们的第一个前端程序
我们按照以上方式，在硬盘中新建一个文件夹（如 D:/learning/），并使用 VS Code打开文件夹、新建一个文件 index.html,写入（代码清单1）中的代码，之后在目录树中使用浏览器打开，若浏览器页面上如下显示了倾斜的“hello world!”，我们就成功写出了一个 Web 前端页面！ 

代码清单
<em>hello world!</em>

「示意图」
1.3 体验 HTML 5 的魅力
前端开发是一个写代码的工作，只要是代码必然离不开代码执行标准，写其他编程语言的代码也一样，比如写 C++ 需遵守 C++ 20 标准，写 PHP 需遵守 PHP 8 标准。目前我们在前端开发中要遵守的标准是 HTML5 标准。
HTML5 标准由 W3C 组织（World Wide Web Consortium ,万维网联盟，制定 Web 技术各领域的标准）于 2014 年发布第一版并持续修订，只要我们编写的前端页面符合这个标准就可称之为 HTML 5 页面，同时， 大部分浏览器也会参考 HTML5 标准来解析我们的代码（“上古时代”的浏览器 IE 就不会遵循 HTML5 标准）。我们可到 https://www.w3.org/TR/ 搜索 HTML 来查阅标准的内容和最新制订进度，若想知道我们编写的代码是否符合 HTML5 标准也可到 https://validator.w3.org/ 使用验证器上传或粘贴我们的代码来验证。 现在验证 HTML5 规范应是每个前端开发者会做的事情。
这些网页是英文的。若英文不好，我们可借助各浏览器自带的翻译器进行粗略浏览。对于前者（HTML5 标准的内容）我们可不看，因为标准的条目太详密，多是对细节的描述，一般作为手册查阅， 我们需要学会使用后者（验证器），它会帮我们详细指出代码中存在的不规范问题。

[图片]

我们可看到上一小节中的那行代码并不完全遵循 HTML5 标准。虽然不遵循标准代码也可运行，但为了方便浏览器及其他工具（如爬虫）更好地理解这些代码以及辅助工程师快速排查代码中的问题，我们要养成在编写代码时遵循标准的习惯。
现在我们就来按照 HTML 5 标准写一个简短又有趣的 HTML5 页面！按照上一节的做法，试着将下面代码清单中的代码写入我们的 index.html 文件并在浏览器中运行，看看会显示什么？看不懂代码没关系，我们以后会系统地学习它们。

代码清单 1-1
<!DOCTYPE html>
<html lang="zh">
<head>
<meta charset="utf-8" /> 
<title>方印</title> 
<style>
.seal {
margin: 0 auto;
margin-top: calc(50vh - 11.5rem);
width: 20rem;
height: 20rem;
border: 1rem double #f00;
padding: 0.5rem;
color: #f00;
font-size: 10rem;
font-family: SimSun, STSong;
line-height: 10rem;
writing-mode: vertical-rl;
}
</style>    
</head>
<body>
<div class="seal">人定胜天</div>
</body>
</html>

对于初次编码的小伙伴，在抄写前需要注意以下几点：
首先很重要的一点！只有在编写 “方印” 和 “人定胜天” 时使用汉字输入法，其余一定要切换至英文输入法，尤其是符号部分。因为符号在中英文输入法下会有 “全角” 和 “半角” 之别，只有英文状态下的 “半角符号” 才会被浏览器解析。
有些标签是成对出现的，比如 " <html></html>"、" <head></head>"、 " <div></div>"，在写时一般遵循一定的步骤，拿代码中的 " <div>" 举例：
先写标签： <div></div>
再填内容： <div>人定胜天</div>
最后加属性： <div class="seal">人定胜天</div>
在 VS Code 中，代码左右的缩进不建议使用敲空格键的方法实现，可点击键盘最左侧一排中的 “Tab” 键来控制缩进。缩进空格会根据不同工程项目的要求，分 2 个空格、4 个空格等规格，可点击 VS Code 右下角的 “空格：n” 进行配置。使用“Tab”键可让我们一键搞定缩进。（若想撤回缩进可按 Shift + Tab 组合快捷键）
虽然 W3C 规范不适合被我们直接拿去学习，但网上还是有很多网站适合我们更方便地学习和查阅。比如“菜鸟教程”、“W3Cschool”、“MDN Web Docs”等，不过前两者对内容讲解比较简洁，特别适合快速入门，而后者介于 W3C 标准和前两者之间，是 Firefox 浏览器的官方 —— Mozilla 基金会运营的 Web 技术在线手册网站，网址是 https://developer.mozilla.org/ ，权威度很高，技术点较全，是专业前端从业人员开发查阅的首选，我们可在对前端技术有一定掌握后尝试学习使用它。 当然 W3C 也有官方的文档，叫 W3C 维基（ https://www.w3.org/wiki/ ），不过貌似使用的人很少，我们可以将它作为一个备用文档查阅。
第二章 HTML 与 CSS
在上一章中，我们编写了一个简单的 HTML 5 界面，但对它的写法我们仍一无所知，接下来我们就正式开始学习前端三剑客 HTML、CSS、JavaScript 的程序编写。
首先一说，本书侧重点是 CSS 技术，对 JavaScript 部分只会做一个初步入门，因为 JavaScript 的内容实在庞大，而书的篇幅有所限制，不能“朝西过东，两手脱空”，当然也考虑到一般 JavaScript 技术教程都是为一些有一定前端基础的读者设计的，本书刚好可方便读者进行衔接。
而 HTML 部分，笔者认为这部分过于基础和简单，故不想浪费过多纸张放在它上面，写的比较紧凑，基本没有废话。若第一遍读着感觉有点吃力，可以试着慢下节奏再读一遍。
2.1 认识 HTML
2.1.1 HTML 的结构
学习前端开发首先要学习 HTML，上面例子中带尖括号（<>）的文本部分即 HTML，它定义了网页外观的结构骨架。HTML 的英文全称叫 Hyper Text Markup Language，翻译成中文叫 “超文本标记语言”，由互联网之父“蒂姆·伯纳斯·李在 1990 年与同事一同创立（伴随这个语言诞生的还有世界上第一个 Web 浏览器）。
“超文本”是指它可创建与其他网页相联系的链接，比如我们使用百度搜索一些内容，在返回结果的网页中会列出很多蓝色的“链接”，点击链接我们就可进入其他网站的网页。
而“标记语言”，我们可以这样理解，众所周知，记事本里的文本文件只能显示文字、换行等内容，没有其他的了，假如我们是计算机界的一个“造物主”，怎么做才能让文字图像等按照一定规则显示更丰富的效果呢？我们可以这样做，像小学时拿着圆珠笔在课本上做标记一样，我们可在文本文件中需要添加效果的地方标上标记，如代码清单 2-1 所示：

代码清单 2-1 
【红色开始】这是红色文本【红色结束】
【绿色开始】这是绿色文本【绿色结束】

然后我们再设计一个可理解我们这些标记的解析器，并输出我们想要的结果。如解析器会以对应颜色在显示屏上输出其带着颜色的文本。
当然，这只是对标记语言的理解。网页中 HTML 标记的重点与上面那个例子不一样，HTML 更偏重于语义而不是显示效果，像代码清单 2-2 一样，直接写这是“标题” 、“段落”，而不是“加大加黑”、“这部分前后要空行”，因为显示效果是后续我们要学到的 CSS 考虑的事情。

代码清单 2-2 
【标题开始】早发白帝城【标题结束】
【段落开始】朝辞白帝彩云间，千里江陵一日还。【段落结束】
【段落开始】两岸猿声啼不住，轻舟已过万重山。【段落结束】

具体怎么显示“标题”、“段落”标签包含的内容，这个交给浏览器去决定。
浏览器为提升体验感，也会考虑一些正文以外的附加内容，比如网页在浏览器标签页上的标题（注意，不是网页内容的标题）、网页的图标等。我们可这样设计：使用一个叫“主体”的标签将文章要显示的内容包裹，而其他附加内容写到“主体”标签之前一个叫“头部”或“网页附加信息”的标签里，另外文本最上面再注明使用的什么标准解析。如代码清单 2-3 所示。
这边再加个示意图

代码清单 2-3
【使用 XX 标准】
【网页代码开始】
【网页附加信息开始】
【网页标题开始】一首诗【网页标题结束】
【网页附加信息结束】
【主体开始】
【标题开始】早发白帝城【标题结束】
【段落开始】朝辞白帝彩云间，千里江陵一日还。【段落结束】
【段落开始】两岸猿声啼不住，轻舟已过万重山。【段落结束】
【主体结束】
【网页代码结束】

这就是 HTML 大致上的结构了。不过 HTML 的 “造物主” 是外国人，他们用的英文字母，如代码清单 2-4 所示，这是一段真正的 HTML 代码（通常叫 HTML 文档，不过为了防止与“文档”一词混淆，该概念在本书的后文中皆以“HTML 代码”一词来表示，这一点读者们请注意），和上面各“标签”分别对应。

代码清单 2-4
<!DOCTYPE html>
<html>
<head>
<title>一首诗</title>
</head>
<body>
<h1>早发白帝城</h1>
<p>朝辞白帝彩云间，千里江陵一日还。</p>
<p>两岸猿声啼不住，轻舟已过万重山。</p>
</body>
</html>

<!DOCTYPE html> 是 HTML 5 的声明标志，在 HTML 5 出来以前还有其他的标志，不过今天我们已经不用。若在源码的开头写上 <!DOCTYPE html>，浏览器就知道这是一个按 HTML 5 代码标准编写的页面，可与一些老旧标准进行区分，以便使用不同的解析方式。（因为还有几个其他的 HTML 标准规范的声明写法，不过目前 HTML5 基本全面普及，其他的规范我们基本用不到）
像里面的div、h1 这些叫标签，不同的内容使用不同的标签，当然不必害怕会有很多标签去记，目前 HTML 的标签只有 120 多个，而需要掌握的只有 50 多个。对于初学者任何东西都不用学那么细，只要先把关键的简单掌握一下就行了，况且它们作为前端开发的基本组成元素，我们会经常见到。
这里笔者将常用的 50 个标签分为三类，分别是代码结构类、文本及多媒体类、表单类，如图 2-1 所示。我们将在接下来的四个小节中介绍他们。

代码结构类
<!DOCTYPE> <html> <meta> <link>	<style> <title>
<body>	<div> <script> <!--...-->		
文本及多媒体类
<h1> ~ <h6> <p> <br> <hr> <blockquote> <em>
<i>	<code> <pre> <a>	<ul> <dl>
<ol> <source>	<video> <iframe>	<table>	
表单类
<form>	<input> <textarea> <button> <select>	<optgroup>
<option> <lable>	

图 2-1 常用的 50 个标签（其中有一些是相互关联的标签，已省略）
2.1.2 代码结构类标签
首先第一类有里有 10 个标签，是 HTML 最常用的 50 个标签里除了与显示元素有关的标签之外所有的标签。若把 HTML 文件比作我们考试时的答题卡，那么这 10 个标签就是“答题卡”上的各种说明信息，比如姓名、班级、科目名、注意事项等。
我们可以使用它们制作一个小的 HTML 文件来初步学习它们，如代码清单 2-5。

代码清单 2-5
<!DOCTYPE html>
<html lang="zh">
<head>     
<meta charset="utf-8" />
<link rel="shortcut icon" href="https://ccgxk.com/2/dog.ico"  />
<title>你好，我是这个网页的标题</title>
<style>
div::after {
color:red;
content: "你好，我是一个样式";
}
</style>
</head>
<body>
<div>
你好，我是一个小节
</div>
<script>
alert("你好，我是一个 JavaScript 脚本");
</script>
</body>
<!--
你好，我是一句注释
-->
</html>

在代码清单 2-5 里有 5 句话，我们会在网页的 5 个不同地方看到它们。抄写上面的代码并保存成文件 test.html，接着在浏览器中运行，结果如图 2-2 所示。



图 2-2 两个运行结果

我们将通过解读这几个标签来解释其运行结果。
（1）<script> : JavaScript 脚本
我们打开浏览器首先会看到一个跳出来的警示框，写着 <script> 标签中的那句话 。其中 alert("你好，我是一个 JavaScript 脚本"); 是一句程序命令，调用的函数 alert() ，可让浏览器显示一个警示框，警示语就是其括号里的字符串。
我们有时会把 JavaScript 脚本内嵌到 HTML 中，其方式就是写在 <script> 标签里。
（2）<body> 和 <div>：主体和小节
关闭提示框后，浏览器界面上就是两句话。其中第一句话“你好，我是一个小节”是在 <div> 标签里的。通过前面的例子和对“标签语言”的理解，我们知道 <body> 标签里的是网页的主体，相当于答题卡上真正要写的内容，而 <div> 则是答题卡上的一个个答题区，我们叫小节。 <div> 需要写在 <body> 内。
（3）<style>：CSS 样式表
在上一章“人定胜天”的那个例子里，我们应该会猜到这个标签里的内容就是 CSS 。不过 CSS 不是控制网页元素的效果吗？为什么在这里我们却在浏览器上看到了一句话“你好，我是一个样式”？难道添加一句话也是效果吗？
没错，其实“::after”是 CSS 里的一种语法，可在 HTML 元素后面添加我们想要的东西（有时我们想要一些需要添加其他元素才能实现的效果，但又不能破坏 HTML 代码结构时，就可这样做，完美实现“效果”和“结构”相分离）。现在它的含义是在所有 <div> 元素后添加一个颜色为红色，文本内容为"你好，我是一个样式"的元素。
与 <script> 一样，我们有时也会把 CSS 代码以内嵌 HTML 的方式写在 <style> 标签里。
（4）<title>：网页标题
这里面的句子“你好，我是这个网页的标题”显示在浏览器标签上，是 HTML 文件的标题。除了显示在浏览器的标签上，它也作为我们网页的代表。我们在百度上查询资料时，一条条结果的蓝色标题其实就是所对应网页的 <title>，即网页标题，毕竟我们不能保证网页的主体里一定有标题，但每个独立的网页文件一定对应着唯一一个 <title> 标题。
（5）<!--...-->：注释
现在还有一句“你好，我是一句注释”，按照第一章的做法，按 Ctrl + U 或者右键选择 “查看源代码”，如图 2-3 所示 ，我们就能看到我们刚才写的所有代码，其中也能看见这句话。这是一句注释。


图 2-3 网页源代码

注释是干什么的？注释就是帮助我们肉眼阅读代码的。因为我们在写代码时，大部分语句都是抽象的程序语言，我们不能直接看懂，所以需要在一些复杂的地方加上一些备注，以方便我们阅读或以后有需要再回来分析、修改。当然，这些注释不会被浏览器解析，仅供我们肉眼阅读。
注释有两种写法，一种是换行，一种不换号。对于一些短小的内容，如代码清单 2-6 所示，可不换行，在一行里写出。

代码清单 2-6
<!-- 下面是网页标题 -->
<title>我的第一个网页</title>

<!DOCTYPE html> 我们刚才已经讲过，这里不再提。下面便是剩余的 <html>、<meta>、<link>。
（6）<html>：HTML 代码标签
它的作用是限定 HTML 代码范围。在很多前端程序员眼中这似乎是个赘余的元素，因为整个 HTML 文件的内容肯定都是 HTML 代码，HTML 5 标准也表示它可有可无，我们可自行选择是否使用它。不过它也并非百无一用，作为整个 HTML 文件的代表，它是定义 HTML 文件的“人类口头语言”类型最理想的地方（英文网页、中文网页、日文网页、西班牙语网页......）。
当我们在 Google 等偏国际化的搜索引擎上搜索资料时，会有一个语言的选项，如图 2-4 所示。谷歌是怎么知道那些网页是什么语言的网页呢？肯定不能单纯凭内容判断，此时它会读取我们网页 <html lang="zh"> 标签（当然其他标签也可）中的 lang="zh" 属性和参数来得知我们网页的语言是汉语（如果这个属性没有定义值，谷歌就会动用人工智能 AI 来解析判断）。当然对于浏览器来说，在一些情况中也会参考这个属性来对 HTML、CSS 代码进行不同语言版本的解析。故我们要记住，在 HTML 代码中定义一个准确的语言真的很重要。
常用的属性值有汉语“zh”、英语“en”、俄语“ru”、法语“fr”、德语“de”、日语“ja”、意大利语“it”等。笔者建议大家要写上这个标签，并写上如 lang="zh" 的属性、以定义该网页的语言。（或 lang="zh-CN"，简体中文）



图 2-4 谷歌搜索引擎设置语言
（7）<meta>：网页元信息
这种标签会提供很多供浏览器和搜索引擎等解析器读取的参数和对该网页文件的描述。比如网页文件的字符编码、网页的内容关键词、网页的程序信息、网络技术上的各种协议等。这部分的内容对搜索引擎优化（也叫 SEO，优化网站在搜索引擎结果中的排名，使网站更容易被搜索到）相当重要，我们会在后面做进一步解释。在这里我们先了解一下字符编码。
标签中的 charset 属性定义字符编码。我们通过以下例子了解一下字符编码。尝试将 <meta> 中的字符编码值（也就是“charset”属性的参数）改为 GBK ,操作如代码清单 2-7 所示。

代码清单 2-7
<meta charset="UTF-8" />
改为
<meta charset="GBK" />

然后我们再次运行该网页，发现原来正常的汉字没有了，转而成为一些奇奇怪怪的乱码，如图 2-5 所示。这是因为浏览器会根据 <meta> 标签来确定使用什么编码器来解析我们的网页，此时我们的网页文件字符编码是 UTF-8 格式的，而浏览器上是按 GBK 格式解析的。


图 2-5 字符编码定义错误而导致的乱码

当然，我们也可在 VS Code 上改变我们文件的字符编码。可点击编辑界面右下角的 UTF-8 ，如图 2-6 所示，在弹出窗口中选择“通过编码保存”，之后输入“gbk”并回车，此时我们的文件就是 GBK 格式的了。重新从浏览器中运行该网页，我们会发现网页正常了。


图 2-6 修改文件字符编码的位置

那么这个字符编码的发明意义是什么？我们可以留意一下该网页文件分别在 UTF-8 和 GBK 字符编码下的文件大小，在笔者电脑上当它是 UTF-8 时体积为 509 字节，而当它是 GBK 时体积只有 459 字节，显而易见使用 GBK 时文件体积变小了。
不过 GBK 虽然会减小体积，但它只支持简体中文、繁体中文、英文，而 UTF-8 不仅支持世界上所有国家的文字（行业间俗称“万国码”，言简意明），且还附加支持很多特殊符号和 Unicode 表情。若我们的网页中文内容比较多，且主要面向国内的话，可使用 GBK 来减小体积，反之应使用 UTF-8。不过提醒一点，随着 UTF-8 解码器逐渐作为世界各国设备的默认字符编码解析器，今天我们很少使用 GBK（以及其他各类字符编码）作为网页字符编码，否则会有很多兼容性问题要处理。
另外， <meta> 与上面提到的其他标签不太一样，它没有开始一块、结尾一块，而是直接一个标签就结束，这种标签叫自闭合标签或单标签。而类似于 <title>网页标题</title> 这种有头有尾的叫闭合标签，也叫双标签。单标签不能写成双标签那样的形式，而是直接写一个标签或在写的标签后添加一个斜杠，如代码清单 2-8 所示，建议使用第三种写法，因为第二种容易和双标签混淆。

代码清单 2-8 
错误： <meta charset="UTF-8" ></meta>
正确： <meta charset="UTF-8" >
正确： <meta charset="UTF-8" />
（8）<link>：外部资源链接元素
若我们留心的话，可在我们网页的浏览器标签页上看到一个“中华田园犬”的狗头，这是我们网页的站点图标。我们网页有时会引入一些资源文件，比如我们这个网页的图标，其图标资源地址是我们配套网站中的狗头图标地址 “https://ccgxk.com/2/dog.ico”。
当然，<link> 标签其实最常用于 CSS 代码文件的引入。我们上面介绍过 <style> 标签，可内嵌这些代码， 在真实开发中我们经常将 JavaScript 和 CSS 代码单独分离成文件，其中 CSS 可通过 <link> 标签引入，下面我们来试一下。
首先删去我们文件中 <style> 标签及其内容，接着在我们的文件目录内建立一个文件，命名为 demo.css ，其内容如代码清单 2-9 所示。

代码清单 2-9 demo.css
div::after {
color:green;
content: "你好，你引入了文件 demo.css";
}

接着在我们 HTML 文件中再新填一个 <link> 标签，放在我们的图标 <link> 标签的下一行，其内容如代码清单 2-10。

代码清单 2-10
<link rel="stylesheet" href="./demo.css"  />

若没有意外，打开浏览器，我们可看到浏览器界面原来那句红色的话“你好，我是一个样式”变成了绿色的“你好，你引入了文件 demo.css”。此时，我们就成功利用 <link> 标签引入了一个 CSS 资源文件。之后我们就可以在这个文件里面写 CSS 代码了，秩序井然、便于阅读。
在这个标签中，属性 rel 的意思是 relation ，即“关联”，我们可以将它理解为该链接的类型，后面的参数若填“icon”或“shortcut icon”则表示后面链接的是图标文件，若填“stylesheet”（Style Sheet 就是“样式表”）则表示这是一个 CSS 文件，虽然也有其他参数，不过很少用，一般情况下 <link> 的用途就是引用站点图标和 CSS 文件。
而后的 href 则是 Hpertext Reference 的缩写，即超文本引用，其实就是填引用的目标链接地址，后面的“ https://ccgxk.com/2/dog.ico”或“./demo.css”就是目标链接地址，也称作 URL。这两个 URL 前者是网址，后者是本地文件中本目录下的文件路径。
网址就是我们平常在浏览器地址栏所见到的那串字符，而文件路径则有很多规则，有绝对路径、相对路径，以及其他一些语法规则，在这里我们先了解两种规则。
一、“./abc.txt”是在当前目录下的 abc.txt 文件。 二、“./dir/abc.txt”是当前目录下 dir 文件夹中的 abc.txt 文件。
对于文件路径更多的规则，我们会在之后相关章节做进一步解释。
（9）结语
现在我们学完了 HTML 中所有常用的代码结构类标签的初步使用，就像我们要建一个博物馆，现在已经有能力将项目手续办好、房子建好、内部装潢舒适了，接下来就是要花心思去把博物馆的核心物件 —— 文物，一件件向里面陈列。
2.2 丰富的 HTML 元素
2.2.1 文本及多媒体（一）
在本章主体内容开始之前，我们先安装一个好玩的小东西。
上文提到过，VS Code 有着海量的插件，现在我们就来安装一个叫 Live Server 的插件。在 VS Code 的应用商店（点击左边栏自上向下第 5 个图标）中搜索“Live Server”找到这个插件并安装。这是一个可建立简单的本地服务器的插件，不过使用其他编辑器的小伙伴也无需慌张，下文不会侧重这个插件做大量文章，它只是一个辅助工具。
重启 VS Code 后，我们会在编辑页面右下角看到 如图2-7 所示的字样 Port:xxxx，现在切换编辑窗口到我们的 test.html，点击这个 Port:xxxx ，此时浏览器会跳出来，其内容就是我们的 test.html。观察地址栏，我们会发现地址变成了 127.0.0.1:xxxx ，如图 2-8 所示，127.0.0.1 是我们电脑本地的 IP 地址，而 xxxx 是我们本地网络的一个端口号。


图 2-7


图 2-8

什么是端口号？简单来说若电脑是一个政府，那 IP 就是这个政府的地址，端口号就是这个政府的一个个办事窗口。我们去政府办事，不会直接找整个政府，而是找政府负责该事宜的办事窗口，每个窗口做不同的事情，在流程上互不影响。
端口号也类似去政府办事，不过换成去请求操作系统为我们“做事”。电脑系统有很多端口号，与电脑产生各类型的交流，就要在对应端口上进行，若没有合适的，就要向操作系统申请，现在我们插件就申请了 5500 端口号作为它启动的服务器的“办事窗口”，只要我们在浏览器上访问 127.0.0.1:5500 就能跟这个插件产生网络交流。若我们在浏览器上地址栏键入 IP 地址时没写端口号，那浏览器默认它是 80，80 端口是 http 协议的默认端口，也就是网站服务器的默认端口，一般省略书写。
网络中的服务器都是这个原理，只不过我们这个小服务器是本地的，地址是 http://127.0.0.1:5500/ ，而百度的是广东某个服务器的，对外地址是 https://14.215.177.39:80/ ，这个地址与 https://www.baidu.com/ 有同等技术效力，只是后者更容易记忆。
这个插件还有个特点，就是我们每保存一次代码，浏览器那边就会自动更新一次，非常方便。现在我们不仅在代码运行上更方便了，而且还对服务器的理解加深一步，“人之知识，若登梯然，进一级，则所见愈大”。至于为什么在这里要启动一个服务器呢？除了让我们更接近真实的前端程序员工作环境，在我们一会儿在讲资源引入时会根据这个服务器，还告诉大家一个相关的小知识点。
接下来我们正式开始学习 HTML 标签中的文本及多媒体类标签。首先这一类标签的用途没有第一类那样抽象，每个标签都很容易理解，可直接翻译成很贴切的汉语。如图 2-9 所示。

<h1> ~ <h6> 1级标题~6级标题	
<p> 段落	         <br> 换行
<hr> 水平分割线	     <blockquote> 引用
<em> 强调的内容     <i> 斜体
<code> 行内代码     <pre> 预格式文本（多行代码）
<a> 超链接	         <ul> 无序列表
<dl> 描述列表       <ol> 有序列表
<source> 媒介元素	 <video> 视频
<iframe> 框架	     <table> 表格

网页起初是为传递文字信息所用，故 HTML 是以仿照我们日常见到的实体纸版文件的结构为基础而设计，里面会有标题、段落、分割线、表格等标签。
对于这里我们学到的“文本及多媒体”标签，是 Web 1.0 时代早期的（Web 1.0 大概指 1990 — 2000 这个时代 ）产物。在 HTML 的最早期版本中，只有不到 20 个 HTML 标签来写传递信息的网页（当然随着版本迭代，很多标签已经变了），就像看我们平常看到的静态的纸质文件或者报纸一样，这也意味着我们敲写这些标签时，就像一位《人民日报》的排版设计师在纸上用钢笔设计报纸初稿一样，为我们网页的主体内容大致的排列位置画一个草图。
那么我们就循序渐进地来尝试和学习它们。新建一个 HTML 文件，可命名为 test2.html，接着写下 HTML 中上一节提到的主题以外的必要标签来“初始化”一番，当然也有个技巧，若是在 VS Code 中，写代码最开始时我们写上“html:5” ，会出现一个提示框，然后单击回车键就能自动生成一个标准的 HTML 5 代码的模板，内容大致如我们上节学到的一样，当然别忘了把 HTML 代码的语言改成中文“zh”，如图 2-10 所示。





图 2-10
我们本节的内容就写在这里的 <body> 标签中。
（1）<h1> ~ <h6>、<p>：标题和段落
首先是 <h1>、<h2>、<h3>······<h6> 标签和 <p> 标签 。在 <body> 标签中写入代码清单 2-11 中的内容。运行结果如图 2-11。

代码清单 2-10
<h1>中国《四书》的简介</h1>
<p>《四书》由南宋朱熹列出，是儒家学派核心经书，保存了儒家先哲的思想
和智慧，至今仍不失其深刻的教育意义和启迪价值。
</p>
<h2>《论语》</h2>
<p>记载孔子及其言行的一部书。儒学最主要的经典。</p>
<h2>《孟子》</h2>
<p>和《论语》格式相同，继承发展了孔子的思想，语言明白晓畅。</p>
<h2>《大学》</h2>
<p>由西汉学者戴圣整理，宗旨至于使人达到“至善”的境界，是“四书”之首。</p>
<h2>《中庸》</h2>
<p>战国末鲁国人孔伋著，宣传“天人合一“理念，对中国古代教育产生较大影响。”</p>



图 2-11
浏览器通过解析这段代码形成如图一样明显的效果。可清晰看出内容中的层级关系，有大标题，有小标题，还有文本。当然就像智能手机系统自带的默认主题，这些样子都是浏览器渲染 HTML 默认的样子，我们之后学到的 CSS 可改变其外貌，这里我们先使用默认外貌。
这便是 <h1> ~ <h6> 标题和 <p> 段落的概念具象化，很简单。不过这两个标签各有一个很重要的、又常常被很多人忽视注意事项。
第一是 <h1> 这个标签，它是一级标签，虽然没有明文规定它的注意事项，但其背后也有一个潜在的原则，即这个“一级标签”要少用。“一级”意味它地位最高，是最重要的标题，除非一些页面比如博文里，页面很简单，只有一个大标题、一篇正文，如我们这个《四书》例子中有明确、唯一大主题可选择使用 <h1>，而在现实中，很少会有这么简单的页面，绝大部分页面中可能会有很多地方需要表示它们是标题，比如很多企业官网、新闻网既有顶部的网站名，又有网页中部很多文章标题等，此时整个页面代码就不要使用 <h1>，而是使用 <h2>、 <h3> 来表示它们，如图 2-12 ，是腾讯新闻网“中的示例，整个页面中就没有使用到 <h1> 标签。
在 HTML 5 标准规定 <h1> 在页面中只能有一个，若我们添加多个 <h1> 标签则对网页结构和搜索引擎优化有很大的影响，但之后的 <h2> ~ <h6> 则可定义很多的次，使用起来比较自由。简而言之， <h1> 要慎用！我们尽量使用 <h2>、<h3> 等级别靠后的标签。

图 2-12 腾讯新闻网首页

第二是 <p> 的使用。它和上节中的 <div> 元素很像，不过它们是两类标签， <div> 是布局用的小节，如其英文全称 division（分离），表示这是一个独立可分离的部分，而 <p> 是有段落语义的 Paragraph（段落），表示这是一个文字段落，两者不能相互替代，当然除了语义不同，它们的使用规则也不同。
这里要了解两个概念，一是 块级元素（block），一个是行内元素（inline，又叫内联元素）。现在有一行字，行内元素可在这一行字中插入，比如 emoji 表情字符就能插入到一行字中（虽然某种意义上它们也属于文字），而块级元素则会单独另起一行，当代码解析到块级元素时就等于在其前后分别加了换行回车键。如图 2-13 所示为两者的区别。（因为已学到的内容有限，这样的诠释只是笼统直观，并不完善。后续我们还会更深入了解它们）


图 2-13

<div>、 <p> 标签就是典型的块级元素，但与 <div> 不同，<p> 里面是不能再嵌套块级元素的，而 <div> 可以，如代码清单 2-11 所示。这种错误对初学者来讲极容易犯，若不知道这个知识点，会在一些项目中出现一些元素突然消失的错误，并且花很久也找不到原因。所以一定要记住 <p> 标签中不能嵌套块级元素。

代码清单 2-11
<p><!-- 以下两行是错误的 -->
<p></p>
<div></div>
</p>
<div><!-- 以下两行是正确的 -->
<p></p>
<div></div>
</div>

若代码清单 2-11 中的第一个例子被运行，除了无法通过 HTML 5 验证，还会被浏览器解析成代码清单2-11-2 中那样奇怪的样子。

代码清单 2-11-2
<p><!-- 以下两行是错误的 -->
</p>
<p></p>
<div></div>
<p></p>

接下来就来学一组行内元素。
（2）<em>、<strong>：强调，行内元素
比较经典的行内元素标签是 <em>、 <i>、 <strong>、 <b>、<a> 四个表强调的标签，不过其中的 <strong>、 <i> 和 <em>、 <i> 的对应关系差不多，都是一个有语义，一个没有，故上面的表格未全部列出，四者对比如图 2-14 所示。

标签	含义	是否有语义	默认显示效果
<em>	局部强调，比如一个词语在某句话中很重要,或英文中的书名、专有名词等。	Yes	斜体
<i>	无意义的斜体。	No	斜体
<strong>	更强烈的全局强调，表示一个句子或短语在一段话或整个内容中很重要。	Yes	粗体
<b>	无意义的粗体。	No	粗体
图 2-11

当然 <em> 和 <strong> 的粗体、斜体显示效果只是浏览器系统默认的渲染效果，通过 CSS 还可改变，甚至能将 <em> 显示成粗体、 <strong> 显示成斜体，但是对于解析器来说，它是能读懂 <em> 和 <strong> 的语义的，所以若是为了追求单纯的显示效果，不建议使用 HTML 标签而应该是 CSS， 目前 HTML 越来越趋向于语义化，我们应当尽可能使用语义标签，比如 <em> 、<strong> ，而不是 <i>、<b>，后两者除了只有一个字母比较好写之外，再找不到理由去使用，像这些单纯为显示效果而生的标签将逐渐被淘汰。
我们可为上面《四书》例子中每句话的人名打上 <em> ，以及第一句中的”儒家学派核心经书“打上 <strong> 的标签来尝试一下这些标签。以第一句话举例，如代码清单 2-12 所示。最终显示效果如图 2-12 所示。

代码清单 2-12 
<p>
《四书》由南宋<em>朱熹</em>列出，是<strong>儒家学派核心经书</strong>，保存了儒家先哲的思想和智慧，至今仍不失其深刻的教育意义和启迪价值。
</p>

图 2-12
另外不建议在”中文“中使用“斜体”效果，原因除了“中文“中没有”斜体“这个概念，还 因为中文中的斜体并不美观，在很多时候会造成重叠混乱等显示问题。若使用 <em> 标签，可使用 CSS 的方式改变它的外观，比如百度网站的“搜索结果”中的条目会将结果中的搜索内容出现关键词的部分标上 <em> 标签，但外观并不是斜体，而是显示成了红色字体。
（3）<a> ：超链接，行内元素
接下来就是 HTML 中的 H 灵魂 —— Hypertext，即超文本，由电脑行业的先驱泰德 · 尼尔森于 1956 年从观察报社工作人员用剪刀对初稿进行修剪的举动得到灵感提出了这个构想，并发明了这个单词。如今它已经成为经常拿着鼠标，食指点来点去网上冲浪的我们再熟悉不过的朋友，它将互联网上不可胜数的网页像积木一样堆成了一个整体，让我们的网页里的文字长出了翅膀。这不仅是个技术，更是一项伟大的理念。
现在，我们就来再新建一个网页，并使用 <a> 标签将它们串联到一起。在我们本目录下新建立一个网页文件，命名为 poem.html ，按照输入 html:5 并回车的方式初始化，其 <body> 标签的内容如代码清单 2-13 所示。

代码清单 2-13
<h1>滕王阁</h1>
<div>王勃</div>
<p>滕王高阁临江渚，佩玉鸣鸾罢歌舞。</p>
<p>画栋朝飞南浦云，珠帘暮卷西山雨。</p>
<p>闲云潭影日悠悠，物换星移几度秋。</p>
<p>阁中帝子今何在？槛外长江空自流。</p>

然后在我们原来的 test2.html 中原来的内容之后再追加这样一句代码，如代码清单 2-14 所示。

代码清单 2-14
<div>
<a href="./pemo.html" target="_blank">单击此处</a>，一起来阅读《滕王阁》
</div>
<div>
<a href="https://www.baidu.com/s?wd=《滕王阁》">单击此处</a>，一起来百度《滕王阁》
</div>

运行它，我们会看到有一个如图 2-13 的画面，鼠标单击第一个”单击此处“，浏览器会神奇地弹出一个新的网页标签，将我们的刚才抄写的《滕王阁》网页展示出来。而我们再回到原来网页上点击第二个“单击此处”，会发现在本网页标签突然跳转（而不是在新标签跳转）变成了百度搜索“《滕王阁》”的结果。

图 2-13

href 属性我们应该已能理解，后面就是鼠标点击后要进入的目标 URL，不过紧跟它后面的 target 是什么？该单词的中文翻译为“目标”， 该属性的作用是定义我们的新页面打开方式，后面的 _blank 即空白页，代表新建一个空白的浏览器标签并把目标显示到那里。除此之外它还有 3 个参数，分别是 _self、_parent、_top。如图 2-14 是他们各自的含义。

参数	含义
_blank	建立新的标签页打开目标
_self	在本页面中打开目标，也是这个属性的默认值。
_parent	如果链接存在于 <iframe> 框架标签内，则在该框架的父框架中打开目标。（注：如果是大网页套着一个 <iframe> 框架，则其效果与 _top 相同，只有大网页套着 <iframe> ，且该 <iframe> 框架网页中又套着 <iframe> 等多级嵌套时才有效果）
_top	在最高级父框架内打开该网页


图 2-14

前两个参数一个是在新窗口打开，一个是在本窗口直接打开。第二个是默认值，如上面“使用百度搜索《滕王阁》”的例子，它的标签内并没有写 target 属性，所以使用的是默认值 _self，也就是只有我们在有新窗口打开的特殊需求时才考虑这个参数是否需要声明，不过一般情况下”在新窗口打开“的情况比较常见，所以大家一定要记住这个属性和参数（target="_blank"），我们经常会用到。
至于后两个例子， <iframe> 作为上个互联网时代的过时产物，我们今天很少使用（后面会简单介绍 <iframe> ），且这两个参数解决的问题也比较少见，所以它们属于为解特殊情况而生的“备而不用型”参数，不是前端基础学习的重点，大家感兴趣可自行查阅相关资料。
当然， <a> 标签的 除了可以将两个网页相互“链接”，还有很多其他的用法，这里先介绍最经典的三种。

1、页内跳转（又叫 id 定位锚点跳转）
2、发邮件、打电话型链接
3、运行 JavaScript 程序

首先是页内跳转。新建 test3.html 并初始化， <body> 标签内的内容如代码清单 2-15 所示。（要善于利用复制粘贴的技能）

代码清单 2-15
<a href="#a">A</a>
<a href="#b">B</a>
<a href="#c">C</a>
<a href="#d">D</a>
<h2 id="a">ASP.net</h2>
<div style="height:50vh"></div>
<h2 id="b">Basic</h2>
<div style="height:50vh"></div>
<h2 id="c">C++</h2>
<div style="height:50vh"></div>
<h2 id="d">delphi</h2>
<div style="height:50vh"></div>
<a href="#">返回顶上</a>

运行到浏览器上，我们可以看到页面变得很长。页面上方有 A、B、C、D 四个链接，在页面最底部还有一个返回顶上的链接，用鼠标依次点击这五个链接并观察其现象，相信大家就可理解页内跳转的含义。
不过这里大家依然会发现新东西，一个是那个名叫 id 的属性、一个是 style="height: 50vh" 这个奇怪的组合。
首先 id 顾名思义就是 “身份证号” ，除了第一行的规则声明 <!DOCTYPE html> ，所有的标签元素都可定义 id 属性，有了这个属性的标签元素就是“有身份”的标签元素，CSS 和 JavaScript 或一些 HTML 解析器可通过这个 id 号来精确寻找这个标签元素（ 不过应注意 id 在 HTML 中是独一无二的，例如若上面有元素定义了 id=“abc”，下面另一个元素就不能再定义 id=“abc” 了）。
后面的 style="height:50vh" 是 CSS 代码内嵌到元素里的做法，也是 CSS 代码三个写入网页代码的位置（CSS 文件、 <style> 标签、标签元素的 style 属性）之一。现在这句代码的意思是该元素的高度为 50 vh，其中 vh 是 CSS 一个常用的长度单位，如 100 vh 就是浏览器可看到网页内容的高度（又叫屏幕高度），50 vh 就是屏幕高度的一半。 在这个例子中使用这个 CSS 属性我们可快速模拟一个高度很长的网页，以解释页内跳转的概念。
当然，这些是后面的内容，但学成于聚，学习本身就在于点滴积累，而且这样做的话我们也可提前对一些内容进行熟悉，这样在之后再次学到时便会有更准确、更深刻的感悟。
然后是发邮件、打电话。这个其实就是在 href 中的 URL 最前方加上了一些浏览器支持的特定的前缀，无可置喙。如代码清单 2-16 所示，我们可以尝试一下点击它们之后会发生什么。

代码清单 2-16
<div>
<a href="tel:1008611">单击此处</a>致电中国移动话费查询直通车
</div>
<div>
<a href="mailto:kohunglee@foxmail.com">单击此处</a>向笔者发邮件
</div>

最后便是本小节最后一个内容， <a> 标签中的 JavaScript 代码。与上面打电话、发邮件的方式一样，只是这次是变成了“javascript:”。如代码清单 2-17 所示为例，我们可以尝试一番。

代码清单 2-17
<a href="javascript:
play();
Function play(){
alert('你启动了一个弹窗');
}
">单击此处启动弹窗</a>

JavaScript 代码写在了“javascript:”后面，其中代码有四行，后面三行定义了一个名为 play 的功能函数，意思是弹出一个写有“你启动了一个弹窗”的提示框，然后第一行调用它。若我们把它运行到浏览器上并点击该链接时，就会弹出这个弹窗。
但是注意，我们尽量不要这样写， 虽然浏览器允许在 href 里写 JavaScript 代码，但这样做显然不符合人类思维逻辑，就像拿铲子吃面条一样，况且在浏览器中已经有专门供 HTML 标签元素运行 JavaScript 的 HTML 标签属性，比如代码清单 2-18 所示。

代码清单 2-18
<a  href="javascript:void(0);"  
onclick="alert('我被点击了')">单击此处</a>

这里嵌入了三个 JavaScript 代码，第一个依旧在 href 属性后，第二个是一个 JavaScript 脚本，在 onclick 属性后。这是业界广泛使用的一种方式，其应用场景就是需要点击 <a> 标签启动一个 JavaScript 脚本时。
onclick 属性可嵌入 JavaScript 代码，而 javascript:void(0); 则可防止 <a> 标签作为链接的角色默认被点击会产生的各种动作（void(0) 是一个“无意义”的函数，可将其他动作抵消掉），毕竟我们前面了解过，若 href 属性的参数为空，则会跳转到根网页，若是井号（#），则会跳转到页面顶部。
Web 1.0 时代的网页是只读的，就像在电脑上看的各种杂志一样，网站是生产者，用户是消费者，而后来有人提出了 Web 2.0 的概念，用户也变成了内容的生产者，在网站上用户可发评论、上传自己的内容等等，比如 BBS（论坛）就是标准的 Web 2.0 产物。
2.2.2 文本及多媒体（二）
上一节我们安装并学习了 Live Server 插件的使用，学到了标题、段落、强调、超链接相关标签的使用，这一节我们继续学习文本及多媒体标签。
（1）<br>、<hr>：换行和水平线
在我们之前写过的前端源码中， 我们会发现源码中我们点回车键所造成的换行貌似不会影响最终网页渲染布局的。当然也不是绝对，不知会不会有人发现，在代码清单 2-10 中，由于第一句话太长，笔者进行了换行处理，然而在图 2-11 中虽然确实没有进行换行，但依然造成了一个“空格”将句子分割为两半小节（其实多个连续的空格也会造成这样的结果）。如图 2-15。当然探究这个现象背后的原理并无意义，我们主要的问题是应如何自由地在 HTML 中插入换行，总不能换一次行就用一次 <p> 或 <div>。


图 2-15


如小标题所示，使用 <br> 标签是可换行的。虽然在设计网页结构上 <div> 分块是换行效果的首选，我们几乎用不到 <br> 标签，但在一些比较特殊的情况下，这个自由的标签恰恰非常好用（这个特殊情况是指测试或“单纯偷懒”时）， 不过我们要明白它同 <i>、 <b> 一样是几十年前的产物，单纯为实现个效果而诞生，语义相对较弱，所以在真实项目（尤其结构搭建）中尽量少用。
下面我们简单使用一下它写首《诗经·小雅·采薇》，感受一下没有语义的纯粹效果型 HTML。如代码清单 2-19 所示。大家可以尝试一番，看看效果如何。

代码清单 2-19
<div>
昔我往矣<br />杨柳依依<br />今我来思<br />雨雪霏霏
</div>


当然还有分割线 <hr> 标签，我们可在代码清单 2-19 的基础上，稍作修改。如代码清单 2-20。


代码清单 2-20
<div>
<h1>采薇</h1>
<hr>
昔我往矣<br />杨柳依依<br />今我来思<br />雨雪霏霏
</div>

不过，这个或许看起来很像 <br> 一样语义感很弱的标签，实际上没有更好的替代品。因为水平线就是实实在在对应着物理纸质上打印的水平线，它真的完全对应一种结构和效果，我们知道 CSS 也可实现这个效果，但一般在文章中，我们还是经常使用 <hr> 作为划线的标签，根据笔者的经验，大部分人是使用 CSS 来美化 <hr> 标签的效果，而不是使用 CSS 来代替 <hr> 标签的效果。
（2）<code>、<pre>：代码块
小标题中的这两个标签很有趣，两者都有“代码”的语义；前者是行内元素，后者是块级元素；前者什么效果也没有，后者却直接拥有魔法。
我们来尝试一下。当然为了避免不必要的步骤，笔者先提前说明， <code> 标签本身除了表语义之外，视觉效果并不明显，今天我们搭配 CSS 来使用一下它。我们在 HTML 代码的 <head> 标签中写入 <styel> 来嵌入一些 CSS 代码。如代码清单 2-21 所示。

代码清单 2-21
<!-- head 中的部分，CSS 样式 -->
<style>
code {
background-color: #f6f6f6;
padding: 5px;
}
</style>
<!-- body 中的部分，HTML 代码 -->
<p>
这两句话展示了<code>HTML</code>语言中<code>&lt;code&gt;</code>标签的用法。
</p>
<p>
下面是一段<code>C</code>语言代码。
</p>
<pre><!-- 注意 pre 是块级元素标签，不能镶嵌到 p 标签中 -->
#include &lt;stdio.h&gt;
int main()
{
printf("Hello, World! \n");
return 0;
}
</pre>

可能有点复杂，我们循序渐进地分析。首先是编写，注意这串代码被注释分为两部分，分别位于 <head> 标签中和 <body> 标签中，我们要放在正确位置。最终浏览器运行结果如图 2-16 所示。
图 2-16
先分析结果。最明显的是上方的“代码词语”有了灰色背景，并且背景围着字符绕了一圈，而下面的程序语句则错落有致，和我们源码中的一模一样，甚至不需要 <br> 换行了。
再分析源码。我们会发现源码中多了两个东西，“&lt;”和“&gt;”，与结果对照他们分别指“<”和“>”，这是因为单纯的“<”和“>”是可被浏览器解析的，有特殊含义，所以我们要使用这种名为“转义字符串”或“字符实体”的东西来代替它们。当然，这几个字母的记忆也很简单，“lt”就是“less than”（小于），代表小于号(<)，“gt”就是“greater than”(大于)，代表大于号(>)。
转义字符也很多，比如图 2-17 所示是我们必须掌握的，对于其他转义字符若用到，可查阅网络。我们可以尝试一下图 2-17 中的内容。

字符	转义字符串	说明
空格	&nbsp;、&ensp;、&emsp;	空格。在 HTML 中多个空格会被解析器忽略，固若要显示多个空格需要转义字符串。这三者按宽度从小到大排列， &nbsp; 等同按下“space”键， &ensp; 等同半个汉字宽度， &emsp; 等同一个汉字宽度。其中 &nbsp; 最常用。
&	&amp;	英文中的 and 符号。（这个符号的英文学名叫 ampersand）
' 和 "	&apos 和 &quot;	英文中的单引号和双引号。
×	&times;	乘号。在英语中，times 表示倍数，乘号即乘上多少多少倍。
©	&copy;	版权符号。网站的页脚处经常会出现，其中 copyright 是版权的意思。

		
						
		
		
图 2-17



<pre> 会将源码中标签内的缩进、空格、换行原封不动地放到显示结果中，以表示代码本来的格式。试想一下，如果没有 <pre>，我们将使用很多 <br> 和 &nbsp; 来达到相同效果。或许不仅我们很麻烦，电脑 CPU 也会觉得很疑惑。
不过需要注意，浏览器默认会将 <pre> 和 <code> 标签中的内容转化为等宽字体。 什么叫等宽字体呢？就是每个字母的宽度都一样的字体。我们一般在浏览器和纸张上使用的叫比例字体，其特点就是每个英文字母的宽度是不一样的，由“iii”和“www”两者肉眼清晰可见，前者比后者窄得多，因为字母 i 的宽度窄于字母 w。而在 <pre> 和 <code> 中，它们使用的等宽字体，其宽度是相同的，如图 2-18 所示。

图 2-18

这种字体起源于过去的物理打字机。 因为它有着很高的一致性特点，阅读性优越，所以今天被广泛用在对文本视觉层级要求比较高的行业上，如计算机程序代码的显示，我们的 VS Code 代码编辑器的代码显示就是使用的等宽字体。当然因为历史缘故，这种字体带有西洋复古的韵味，故也时常受平面设计师的青睐。
而 <code> 标签，则是行内元素版的 <pre>，我们经常使用一些 CSS 效果套在 <code> 的内容上，类似我们平时看到的书名号“《》”来表示书名一样，向读者表明这是一小段代码或者代码词语。
（3）<table>：表格
表格是我们最熟悉的文档元素之一，在网页中也经常出现。我们来学习一下如何在网页中定义一个表格。在 <head> 和 <body> 标签中分别插入代码清单 2-21 里对应的内容。

<!-- head 中的部分，CSS 样式 -->
<style>
table {
border-collapse: collapse; /* 该属性可用于合并表格边框 */
}
table th,td {
border: 1px solid black;
padding: 4px;
}
</style>
<!-- body 中的部分，HTML 代码 -->
<table>
<caption>城市介绍（2021 年）</caption>
<thead>
<tr><!-- 注意 thead 中的“单元格”是 th ，而不是 td -->
<th>城市</th>
<th>面积（km<sup>2</sup>）</th>
<th>人口（万）</th>
</tr>
</thead>
<tbody>
<tr>
<td>北京</td>
<td>16,410</td>
<td>2,188.6</td>
</tr>
<tr>
<td>上海</td>
<td>6,340</td>
<td>2,489.4</td>
</tr>
</tbody>
</table>

这是一个标准、干净、精炼的表格元素使用示例，最终效果如图 2-19 所示。
图 2-19
示例代码中的新元素有点多，这里以一个图表来将例子中的元素进行初步诠释，以方便各位进一步学习。见图 2-20。


属性或元素	含义
border-collapse	边框合并。CSS 中专门为 <table> 标签设立的属性。因为默认情况下单元表格会有外边框和内边框，当这个属性的参数为 collapse（合并）时，两个边框会合并成一个边框。一般情况下，我们项目中的表格都会使用这个 CSS 属性。
border	边框。后面的参数分别是边框粗细、大小、边框颜色。如例子中的 1px solid black （1 个像素宽、线条类型、黑色）。
<caption>	表格标题。是一个语义标签，表示表格元素的标题。应注意，这个标签必须直接写在 <table> 其后，且每个表格元素只能有一个标题。
<thead>	表格中的表头。
<sup>	HTML 中的上标效果标签。非常用标签。可产生类似于平方符号的上标。效果。姊妹标签是 <sub> ,可产生下标效果。
<tbody>	表格中的主体（当然，还有 <tfoot> ，用于表示表足，不过例子中没有使用）。

<tr>	表格中的行。
<th>	在表头中的列。
<td>	表格主体和表足中的列。


我们简单来分析一下代码。首先还是 CSS。这个地方我们会发现一点新内容。虽然很多例子笔者已尽可能避免超纲内容，但没办法， HTML 默认的 <table> 显示效果实在太令人疑惑，没有 CSS，连个边框都不显示。
第一个 border-collapse ，在上面的属性表格中已作解释，这个属性已成为表格 CSS 的标配，用于合并单元表格的内边框和外边框。没有它的话，边框线条会有两层，看起来十分奇怪。
其后便是这样一句 CSS 代码：table th,td，这里用到了 CSS 中的选择器语法“后代选择器”，使用汉语来解释这句代码就是：“所有 <table> 标签内部的 <th> 和 <td> 的 CSS 属性”。在这里我们先初步理解便可，CSS 的选择器语法也有很多内容，在后面第三部分的内容中我们会做进一步解释。
之后便是表格中的各个内容了。在这里需要说明一点，如果我们删去 <thead> 标签而保留 <th> 标签，其实浏览器渲染引擎依然会将 <th> 的内容当做表头，最明显的证据是删去 <thead> 标签后， <th> 中的内容在浏览器上依然是加粗显示，因为 th 的含义就是 table head（表头）。但为什么会有一个 <thead> 标签呢？
使用 <thead> 除了语义更好外，其实在打印网页时两者会产生区别。我们可以利用复制粘贴，将该表格做的很长，之后按 Ctrl + P 快捷键或右键 -> 打印来调出打印窗口。然后再尝试删去 <thead> 后做一遍。
我们会发现，使用 <thead> 标签后，如果表格的内容超出了其中一个打印页面，那么第二个打印页面会再展示一遍表头，大大方便读者进行阅读，如图 2-21 所示。当然，这只是使用 <thead> 标签的其中一个好处，或许浏览器还有其他更多的优化，以及未来的进一步拓展，所以笔者建议各位小伙伴们在写表格时，在表头处使用 <thead> 标签。

图 2-21

在历史上还有一个有趣的知识，即 CSS 还不流行的年代，人们为了制作出很复杂的网站布局，在没有合适的工具下，只能尝试挖掘 HTML 的潜力。此时人们发现 <table> 标签原生就有横纵排版的能力，于是它便实至名归成为当时网页排版的中坚力量，这个方式又叫表格布局，也就是将整个网页设计成一个表格的形式。当然，现在我们已不再这样做。我们现在使用的是 <div> 等元素 + CSS 来实现复杂的布局。
也可能正是因为这段时间，浏览器为方便程序员快速排版网页内容，才取消了默认边框的显示。
（4）<ul>、<dl>：列表
在 HTML 中，列表有以下三个种类，有序列表、无序列表、定义列表。 我们可尝试代码清单 2-22 中的内容来初步了解这三个内容。

代码清单 2-22
<h2>有序列表 - 早晨醒后依次要做的事</h2>
<ol>
<li>起床</li>
<li>穿衣服</li>
<li>刷牙和洗脸</li>
</ol>
<h2>无序列表 - 生物的三大形态结构</h2>
<ul>
<li>动物</li>
<li>植物</li>
<li>微生物</li>
</ul>
<h2>定义列表 - 编程语言介绍</h2>
<dl>
<dt>C++</dt>
<dd>一门在 C 语言基础上建立的高性能计算机编程语言。</dd>
<dt>Python</dt>
<dd>一门语法优雅、在世界上广受欢迎的解释型编程语言。</dd>
</dl>

最终效果如图 2-22 所示
图 2-22
简单分析一些它们的区别。
1、有序列表使用的 <ol> + <li> 组合，用来表示一系列有顺序的内容。
2、无序列表使用的 <ul> + <li> 组合，用来表示一系列无顺序的内容。
3、定义列表使用的 <dl> + <dt> + <dd> 组合，这是一个比较特殊的列表组合，因为无序列表一定程度上可将其替代，所以并不常用。我们可将其类比为字典，其中 <dt> 标签中是“定义术语”，如同《新华字典》中的一个个要被诠释的字， <dd> 则是“描述术语”，就像《新华字典》中对每个汉字的诠释内容。
当然，列表标签不像 <p> 标签，列表标签是可以嵌套的。我们可以在一个 <li> 条目下再嵌套一个如 <ol> + <li> 这样的组合，但是要注意，HTML 5 规范中不允许在 <li> 中直接嵌套 <li>。嵌套案例如代码清单 2-23 所示。我们可以尝试一番，并使用浏览器来观察嵌套列表的效果。

代码清单 2-23
<h2>服装的分类</h2>
<ul>
<li>上装
<ul><!-- 注意！嵌套列表一定要有 ul、ol 等标签来说明类型 -->
<li>运动衫</li>
<li>夹克</li>
</ul>
</li>
<li>裤装
<ul>
<li>短裤</li>
<li>长裤</li>
</ul>
</li>
<li>裙装
<ul>
<li>连衣裙</li>
<li>吊带裙</li>
</ul>
</li>
</ul>

通过以上案例，我们会知道这类标签可以用在文章的显示上，其实我们还可以在更多地方使用它们。
“列表”可理解为一系列有关联的内容，比如有些博客网站的侧边栏有日期、最近文章、最新评论等组件，它们都可看做是侧边栏组件类的内容，所以我们除了选择 <div> 定义它们，也可以考虑使用 <ol> 和 <li> 以无序列表的形式定义它们。换句话说， 列表标签里不仅可以放文字，还可以放图片等其他内容，建议我们在一些有类似列表型的关联关系的页面模块（如网站的很多侧边栏）上使用列表元素，以提高页面的语义度。
（5）<img>：图片
在之前我们学到的标签中，大都是与文字相关的内容，现在我们来学更有意思的内容 —— 图片、声音、视频。
首先是我们使用频率最高的图片标签 <img>，近年来随着网络速率的腾飞，网页中可嵌入的元素越来越多，图片大概是现在我们浏览网页除了文字外最常见到的页面元素了。在代码编辑器中输入代码清单 2-24 中的内容。

代码清单 2-21
<!-- head 中的部分，CSS 样式 -->
<style>
img {
width: 600px;
max-width: 100%;
}
</style>
<!-- body 中的部分，HTML 代码 -->
<h2>城市海岸线</h2>
<img src="https://ccgxk.com/coastline.jpg" alt="Qingdao coastline" />

显示效果如图 2-23 所示。

图 2-23

这是一张笔者在山东青岛的黄岛区拍摄的远眺城市海岸线的照片。从现在开始，我们枯燥的代码生活终于得到一定程度的解放，进入图文并茂的时代了。在关于 <img> 标签的代码中，有以下几部分内容需要注意。
首先是标签。 注意， <img> 标签就像 <head> 中的 <meta> ，是自闭合标签，不存在 </img> ，所以建议大家在该标签的所有属性最后加上“/”以表示标签结束。
在标签中，我们可看到属性 src 和 alt，当然我们知道 HTML 中每个标签中都可以添加很多属性，但反过来，对于一些标签，可能有一些属性也是写代码时必须要包含的， 如 <img> 标签，必须要有 src 和 alt 两个属性，否则代码将不符合 HTML5 标准。
src 属性后的参数是资源（这里是指图片）的 URL 地址。这个地址可以指向本地的图片，也可以指向网络上的图片，与 <a> 标签中的 href 差不多（大家也可以找一张自己喜欢的图片放到本地，试试怎么样能在代码中写出它的 URL）。有时我们也会直接将图片的 base64 数据写在这里，关于 base64 的信息，我们后面会讲到。
alt 属性后的参数是图片的可替换文本，通常是关于图片的解释。alt 就是 alter（改变、转变）的缩写，由于图片属于外来资源，固如果因为网络问题或 URL 地址无效的话，我们的浏览器可能获取不到图片，此时浏览器就会将 alt 属性中的参数作为文本，替换显示器上的本应显示的图片。当然也可作一个替身帮助浏览器阅读器或无障碍访问设备来获取图片的信息。我们可尝试将 src 属性中的 URL 地址破坏，此时浏览器的显示效果如图 2-24 所示。（再次提醒，alt 属性是 <img> 标签必须要有的，一定不要忘记写）。

图 2-24

接着就是 CSS 部分。这里我们又将认识一个新的属性 max-width。这是一个经常与 <img> 搭配使用的 CSS 属性，max-width = 100 % 意思是“图片的最大宽度为 100% 个屏幕宽度（即屏幕宽度的 100%）”。因为我们现在以全面进入便携联网设备的时代，所以我们的网页极可能会在如智能手机这样狭小的屏幕上显示， 如果图片的宽度设置一个固定的值，那么在小于这个宽度的设备上会无法将图片显示全。当设置 max-width 后，可以很好解决这个问题。如图 2-25 中的描述。

图 2-25

我们也可尝试使用鼠标拖动浏览器的边缘，调整浏览器的窗口大小，看看当浏览器的窗口宽度小于图片的宽度时会发生什么。
如果直接在手机运行，可能不会有像电脑那样的效果，这是因为手机上运行网页，一般会将页面缩小来显示，如果想达到如电脑上的效果，需要在 HTML 头部添加这样一句内容，让手机以放大后的尺寸进行显示，如代码清单 2-22 所示。当然，如果我们使用 VS Code 自动填充 HTML，可能自动带有这句代码。

代码清单 2-21.5
<meta name="viewport" content="width=device-width, initial-scale=1.0">

当然趁着这个案例，笔者要说明在本书中的一件事情。在网上的一些教程中，我们可能会看到类似于代码清单 2-22 这样的对 <img> 标签的示例代码。

代码清单 2-22
<img width="600px" height="338px" src="https://ccgxk.com/coastline.jpg" alt="Qingdao coastline" />

与上面例子的不同点是，这里的标签中含有 width 和 height 属性，其含义如其对应的英文意思，即“图片宽度”和“图片高度”。其实在之前讲过的很多标签中都有类似的合法属性，如表格 <table>，可直接在里面加上 border=”1px” 的属性，甚至 <body> 可以直接在里面定义页面的背景颜色 <body bgcolor=”red”>，使整个页面背景变红色。
但笔者不建议各位学这些属性，因为已经没必要学了。这是一类很古老的 HTML 属性，当年专门用来设置标签的显示效果，追溯历史它们可能诞生在 CSS 时代以前那种简单的网页时代。今天我们的 CSS 已经无比强大，对于这种简单的效果使用 CSS 就可轻松实现，并且还易于维护，强行使用这些属性只会搅局我们的工作， 所以对于任何有关 HTML 显示效果的古老属性，在本书的其他章节都不会提及，并且我们将来写程序也永远用不到它们。
还记得我们之前使用的 VS Code 插件 Live Server 吗？它可让我们的浏览器以访问服务器的形式打开我们的前端代码、方便访问、实时更新，此时这里要插一个小的知识点，虽然该知识点并非前端入门的必要知识点，但笔者认为可能会在以后的工作中给我们带来一些方便，所以建议大家了解一下。详细操作很简单，删去 URL 中的 https: 或 http:，只保留双斜杠 //，如代码清单 2-23 所示。

代码清单 2-23
<img src="https://ccgxk.com/coastline.jpg" alt="Qingdao coastline" />
改为
<img src="//ccgxk.com/coastline.jpg" alt="Qingdao coastline" />
<!-- 注意！只有服务器中的网页代码这样写才有效，本地的网页这样写会报错！ -->

原先的 URL 前面有个 https，过去我们可能熟悉 http 这个术语，因为在一些书籍里我们见过 HTTP 协议，所以有些小伙伴会有点迷惑，为什么这里 URL 里是 https 呢？
这是该网站支持 SSL 协议技术的标志，即 HTTP + SSL，这个技术可像“保镖”一样护送我们的操作和网页的内容在互联网线缆之间传输，使其仅在目标网站服务器和客户端浏览器两个端点可读，以此确保内容不被破坏，举两个例子，没有 SSL，黑客可在数据传输中途的设备上截获我们的信息，并将我们在网购时的付款数字更改，或篡改我们要访问的网页，添上恐吓内容对我们实施诈骗。当然关于 SSL 技术更多的细节，后面章节也会提到。
在十多年前，使用 SSL 技术的网站并不多，但近年来随着互联网越来越发达，信息安全逐渐被人们重视，SSL 技术也就基本普及了，大部分网站的已都可使用 https 前缀来访问，也包括网站内部的资源（如我们例子中的那张“海岸线”的图片）。可即使如此，还是有大量网站没有配置 SSL，如果我们使用 https 前缀访问会 404 报错提示找不到资源， 所以在一些我们知道资源地址，但不知道这个地址是否支持 SSL 的情况下，可以直接将其空着不写，只写后面的双斜杠，这样浏览器会自动帮我们判断这个资源 URL 究竟用 http 还是 https。
简而言之，这样比较省心（就像“万金油”一样）。以后碰到网络类型的 URL 地址，可选择省略前缀，只写双斜杠。当然一定要记住，只有以访问服务器的形式访问这个网页这样写才有效，这也是为什么我们要使用 VS Code 插件 Live Server， 毕竟我们在本地的网页中以这样的形式写代码，浏览器会报错。
（6）<audio>、<video>：音频和视频
先是音频。运行代码清单 2-24 中的代码，体验一下网页中的“音频”，现在我们终于打破 Web 上的宁静了。

代码清单 2-24
<audio controls src="//ccgxk.com/music.mp3">
您的浏览器不支持 <code>audio</code> 标签
</audio>

这是一个简单的 <audio> 例子， 其中属性 controls 告诉浏览器我们需要一个有播放、停止、音量调节的页面控件，属性 src 的参数则是我们音乐文件的地址。（这个音乐是网易云音乐歌手 I-zony 制作的《再来一次》）
<audio> 是一个双标签，一些老旧、特殊的浏览器，可能无法解析 <audio> 标签，那么它就会把 <audio> 标签当成一个普通的文本标签，把标签间的内容当普通文本输出。因此我们通常在这里写上提示语（您的浏览器不支持......），告诉他们要使用支持 <audio> 标签的浏览器浏览。
显示结果如图 2-26 所示。

图 2-26

我们可以尝试不使用浏览器给我们的页面控件，使用我们自己的命令来控制音乐。允许代码清单 2-25 中的内容。

代码清单 2-25
<span onclick="myMusic.play()">播放</span>
<span onclick="myMusic.pause()">暂停</span>
<audio id="myMusic" src="//ccgxk.com/music.mp3" >
您的浏览器不支持 <code>audio</code> 标签
</audio>

使用鼠标点击结果中“播放”、“暂停”，听一下是否有它对应的效果。
这段代码是在上面例子的基础上，删去了 controls 属性，新添了 id 属性，参数是我们为它定义的 ID 昵称“myMusic”（之后我们叫它“myMusic”元素）。在 <audio> 标签上面是两个 span 标签（在之前章节中我们说过 <span> 是“行内元素版的 <div>”），我们为它们添加了点击事件，即添加了 onclick 属性，可以在点击该 <span> 标签后触发参数中的 JavaScript 脚本代码，。
这两句 JavaScript 代码，分别控制了“myMusic”元素的播放和暂停。
元素使用 id 属性的好处是， 我们可在 JavaScript 脚本代码中直接用 id 属性的参数来作为元素对象，并对其使用方法，这样我们的代码就干净、易读多了。play() 和 pause() 就是分别控制这里的 <audio> 元素对象播放、暂停的方法。
接下来是视频，标签是 <video>，其使用与 <audio> 很像，只不过有了宽、高的概念，如代码清单 2-26 所示。

代码清单 2-26
<video style="width: 300px;" controls src="//ccgxk.com/sea.mp4">
您的浏览器不支持 <code>video</code> 标签
</Video>

显示效果如图 2-27 所示。
（7） <blockqoute>、<iframe>：引用和框架
<blockqoute> 这个标签是有“引用”的语义，一般不作为搭建 HTML 结构使用，而通常出现在网页文章当中。因为 HTML 中很多元素就是以实体文档为原型制作，在论文、一些报纸、论述类书籍里会有很多引用其他文章里的资料，所以相应 HTML 中也有这样一个标签，以顺应人们的写作习惯。
<blockquote> 还有一个行内元素版的兄弟标签，是 <cite>。可以在我们的文章、句子中告诉计算机某个词语的内容是引用过来的，比如“某个标题”。如代码清单 2-25 中的代码所示。

代码清单 2-25
<div>
<h2>cite 标签的使用案例</h2>
<p><cite>“靡不有初，鲜克有终”</cite>，这是<cite>《诗经·大雅·荡》</cite>中的一句话，告诉我们做人做事要善始善终。</p>
</div>
<div style="width:600px">
<h2>blockquote 标签的使用案例</h2>
<P>
语言是人类从丛林生活到征服世界这个过程中最重要的力量，
让人类从原始社会几十个人的小组织，
发展成为如今可以高达十几亿成员的巨型组织（国家）。
</p>
<blockquote cite="https://b23.tv/gBlX5b6">
组织，起源于人类社会协作分工；
语言，让协作高效，使人类文明脱颖而出。——《未来的工作方式到底是什么样的？》
</blockquote>
<p>
因为语言，我们可以相互交流想法，
避免了很多猜疑和误会，
即使是陌生人之间也能够高效合作，
一条简短的公告就能让上千、乃至几十万人一起合作完成一件复杂的事情。
</p>
</div>

最终显示效果，如图 2-26 所示。
图 2-26
<cite> 的默认显示效果是斜体， <blockquote> 的默认显示效果是一个 40px 的向右缩进。 在代码中， 在引用的短篇内容、作品标题、网址左右套上 <cite> 标签，一定程度上可增加我们网页的严谨性。
代码中的 <blockqute> 标签中有一个 cite 的属性，用来注明我们引用内容的来源 URL，如例子中的那段话，就是引用的 bilibili 弹幕网中的官媒 UP “央视新闻”发布的一则视频中的台词，cite 属性的参数即该视频的地址。
接下来是框架 <iframe>，它又叫内联框架，简单理解就是在网页中再引入一个网页。它是在浏览器技术还不发达时，开发人员常用的网页结构搭建元素。我们先来看这样一个例子，如代码清单 2-26 所示。

代码清单 2-26
<iframe name="myFrame" 
style="width: 600px;height: 80vh;"
src="//www.bing.com" 
></iframe>
<a href="//www.bilibili.com" target="myFrame">点击切换</a>
<!-- 一定要注意，iframe 标签是双标签 -->

运行后，我们可以在浏览器中看到一个区域，如浏览器里套浏览器一样，里面是“必应网”的界面，这便是 iframe 的使用效果，如图 2-27。右侧下方是一个“点击切换”的链接，点击后“虚拟小型浏览器”里的网页会跳成 BiliBili 弹幕网的网页。

图 2-27

当然本地的网页也可以链接到，如果我们在本目录下设立 test2.html、test3.html，将框架中的 src 改为 ./test2.html、./test3.html，也是能正常显示的。我们可把 <iframe> 当做一个“图片元素”，放在我们网页的任意地方。
需要强调一点， <iframe> 和 <img> 在标签的书写上有点不一样， <iframe> 是双标签，即使起始标签和终止标签之间并没有内容。如果我们按照单标签的格式写，如代码清单 2-26 中所示，则 <iframe> 后面的所有内容都会被浏览器忽略。

代码清单 2-26
<iframe src="//www.bing.com" />
<p>你好，我会被浏览器忽略</p>

有些比较老的书籍中还有 <frameset> + <frame> 这种组合，就像刚才学到的 <table> 一样嵌套来写，不过现在那种写法已经废弃，现在我们只需知道 <iframe> 就行了。
<iframe> 标签是一个很方便的标签，但是在如今的网页上，我们很少见到它的身影， 一方面当前在 JavaScript 中有相关指令技术（比如 Ajax）可完美的将它代替，另一方面它对网页的性能影响极大，毕竟本来现代的很多网页，加载一遍就很费资源了，如果网页存在 <iframe> ，则在加载主网页时，还要再从零把框架内对应页面再加载一遍（且还会阻塞主网页相关资源、脚本的加载），而且 <iframe> 一定程度上算一个独立的网页，会消耗和其他网页相同的计算与内存资源。
当然，不可否认，如果用 JavaScript 来实现相同功能，会写很多行的代码，而且后端也要有相应接口，使用 <iframe> 则非常简单，只需制作或生成一个网页“粘”到网页相应位置就行了，所以在一些性能要求不高、或需要模拟真实页面（比如在线网页编辑器的预览）、亦或框架里的页面很简单（比如一些广告位，像 Google 广告这种），我们可能会用到它。
它有时也会涉及到一些网络安全隐患问题，如果我们不希望我们的网页被其他网页所 <iframe> 嵌套，可在网页的头部加上代码清单 2-27 中的内容。

代码清单 2-27
<meta http-equiv="X-Frame-Options" content="SAMEORIGIN">

这样，这个网页只有在同一个域名中的网页（比如 127.0.0.1 或 www.baidu.com ）里才允许引用，其他网页引用会报错。如果我们不想让网页在其他任何网页中引用的话，即使两者域名相同也不行， 可将代码清单 2-27 中的属性 content 的参数改为 DENY。
2.2.3 表单相关类标签
“表单”，英文名为“form”，原意指我们生活中办事常见的各种“表”，如“申请表”、“信息表”、“考勤表”。
表单的优点显而易见，即“统一”，我们可以收集到不同用户提交的统一结构的信息。
除了日常生活中我们经常会填一些“表单”，在网页上我们也经常需要， 像我们注册 QQ 账号时的申请页面，里面各种选择框、文本框、按钮就是表单元素。
现在我们来尝试一个很简单的表单例子。运行代码清单 2-28 中的内容。

代码清单 2-28
<form action="//www.baidu.com/s" method="get">
<input type="text" name="wd" />
<input type="submit" value="百度一下" />
</form>

图 2-28
运行后如图 2-28 所示。这个结果很像我们常见的百度搜索页面，左边一个输入框，右边一个“百度一下”按钮。现在我们尝试在框中输入问题，如“如何做京酱肉丝”，单击“百度一下”这个按钮，此时页面会跳转到一个新的页面，也是百度真实的搜索界面，非常神奇。如图 2-29。

图 2-29

现在我们来了解一下这个过程是怎么发生的。首先是例子中的一些标签元素和属性的解释，见表 2-30。

标签元素或属性	含义
<form>	表单框架标签。划定一片区域作为放置一些表单元素的空间。
<input>	输入控件标签。
action	指定 <form> 表单框架中的数据提交到的地址，在本例中，表单数据会提交到“ https://www.baidu.com/s ”。
method	指定 <form> 表单框架提交数据时的数据通讯方式，在前端开发中常用的数据通讯方式主要有 GET 和 POST，在本例中使用的是 GET。
type	指定 <input> 输入控件标签的类型。在本例中，该属性的参数“text”对应着“文本输入框”、参数“submit”对应着“表单数据提交按钮”。

name	为该控件内用户输入的内容起个名字，比如 name="wd" （wd 为 word 的缩写），用户在文本框中输入 hello 后，最终浏览器在收集它的数据时，hello 会被封装成 wd=hello 这种形式。
value	在本例中，value=“百度一下”表示该“数据提交按钮”上的文本是“百度一下”。

表 2-30

当我们点击“百度一下”数据提交按钮，会触发浏览器内部的表单数据提交动作，此时浏览器会收集我们这个表单中的信息并封装，数据变成“wd=如何做京酱肉丝”，接着浏览器再以一种叫 GET 表单数据通信的方式（也叫 GET 请求），将这个数据传输给我们在代码中 action 属性定义的服务器地址 https://www.baidu.com/s （这是百度服务器生成“搜索结果网页”的服务器地址）。
在这个例子中，GET 表单数据通信方式很简单，要而论之即浏览器会生成一个把 action 地址和表单数据拼接起来网页地址，两者间使用半角问号“?” 连接（即 “ https://www.baidu.com/s?wd=如何做京酱肉丝 ”），接着浏览器再跳转到这个地址，很简短的过程！图 2-30 为这个过程的示意图。

图 2-30

只要浏览器成功访问带有表单数据的网址，该数据就可被传输给对应服务器，这是对“GET 表单数据通信方式”最简单的理解。
在 GET 的数据通讯方式中，服务器是在网址中获取数据的，我们成功访问地址“ https://www.baidu.com/s?wd=如何做京酱肉丝 ”，百度服务器（ https://www.baidu.com/s ）就能接收到我们写在地址里的请求数据（wd=如何做京酱肉丝）， 因为网址中半角问号 ? 后的内容可被服务器接收，之后它在后台就会拿着数据为我们处理，最终生成一个“百度搜索结果网页”发送给我们浏览器。
当然，补述一点， 如果我们的数据有多条，那么浏览器封装时，多条数据会使用符号 & 来连接，比如“ https://www.baidu.com/s?wd=如何做京酱肉丝&lang=cn ”（添加了一条lang=cn 的数据）。
（1） GET、POST 表单数据通信方法
其实这个例子就是个简单的前端与后端交互的案例， “百度服务器”可看作我们项目中的后端，我们写的这四行代码可看作我们项目的前端。
前后端交互是交互数据的，在 form 表单中交互数据通讯方式有两种，GET 和 POST。我们现在可利用 form 表单来实现 GET 和 POST 通信，以下是这两种方式的区别。
GET ：字面上理解即“得到”，该方式一般用于数据的获取。比如我们拿着“城市名”来获取它当天的天气，拿着“文章的 ID 号”来获取某篇文章的内容数据，拿着“问题”来得到百度的搜索结果（如我们的这个例子）。
POST：中文直译为“邮递”，和 GET 恰好相反，它经常用于向后端服务器写入数据，比如在网页上传图片、提交我们的申请表信息、上传我们的个人资料。
POST 和 GET 最显著的不同是， GET 是直接把数据写在了网址里，而 POST 没有。对于 GET，因为网址有长度限制，最大限度为 2048 个字符，所以我们无法使用 GET 方式向服务器传递大量信息，不过这样也有优点，即我们可将这个地址保存起来，下次需要的时候直接访问即可，譬如我们可把 “ https://www.baidu.com/s?wd=如何做京酱肉丝 ”直接存进浏览器的书签里，下次肚子饥了去厨房做饭，直接点书签就行，毕竟 GET 归根结底是为“得到”数据而设计。如果要传输大量数据，必然选择 POST。并且更重要的是 POST 不仅可传输文本数据，还可传输如 MP3 数据、图片数据等二进制数据。
我们也可尝试使用 POST，只需将这个例子中的 method 属性的参数改为 post，当然肯定不会起作用，不会像刚才 GET 模式下的那种出现搜索结果的效果，因为百度服务器未设置接受这个 POST 请求参数的程序。
POST 请求是一次性的（再次刷新页面，我们提交的数据会消失，浏览器可能会询问我们是否重发刚才的数据），我们网址后面也没如 GET 那样的对 POST 数据的后缀物，因为这个特性，我们会使用 POST 来传递一些如“密码”这样的敏感数据，当然密码也是二次加密后再进行传输，因为 POST 数据在传输过程中仍可被中途拦截。
像 action 中的参数“ https://www.baidu.com/s ”， 是一种 API 接口，我们前后端开发就是约定好这样的接口后再来敲业务代码，就像电脑主机和各种外接设备使用 USB 一样，图 2-31 是一个模仿我们在实际项目中会获得的接口说明，一般附在我们项目的开发文档里。

图 2-31

有了这个文档，我们就能很好的实现前后端工作相互分离了， 前后端两个部门无需关心对方的工作细节，只要前端程序员有 API 接口手册，后端程序员能保证 API 接口可用就行了。
当然，在 HTTP 数据传输协议中，还有一个略显生僻的 PUT 方法，有的文档说，HTTP 协议的 PUT 方法用于新建资源，POST 方法用于修改资源。大家如果感兴趣，可以查询互联网了解一下。
（2） <lable>、<input>：标注、输入控件
上面的例子已演示 <input> 的一个使用例子，现在我们来制作一个带标注 <lable> 的表单，简单模拟我们的账号登录界面。（只是前端模拟，没有数据交互效果）

代码清单 2-30
<form>
<div>
<label for="account">账号：</label>
<input type="text" id="account" name="user" required />
</div>
<div>
<label for="userPwd">密码：</label>
<input type="password" id="userPwd" name="pwd" required />
</div>
<input type="submit" value="登录" />
</form>

运行效果如图 2-31 所示。

图 2-31


这里例子中，主要涉及两个标签， <lable> 和 <input>。
<lable> 是“说明标签”。在 HTML 中我们可为我们的表单元素添加一个“说明标签”，即在网页适当位置加上 <lable>，其中 for 属性的参数应为我们目的元素的 id 值。虽然“说明标签”也可以使用普通文本类的标签，如 <span>，但显然使用 <lable> 语义会更好。当然，也有其他好处，我们可尝试使用鼠标点击 <lable> 中的文本，比如点击浏览器上的“账号：”字样， 此时浏览器会激活其对应的输入框为编辑状态，哈哈...... 算是一点小惊喜吧！
<input> 是表单中的主要角色。如何理解 Input？ Input 就是“输入”，是机器接收信息的设备，像机器上的探测器接口、电脑上的摄像头、音响后面的音频输入线。在 HTML 中的 <input> ，指计算机接收用户信息和操作的"设备"，如这里“方方正正”的文本输入框、提交按钮。
<input> 中的 type 属性指定该输入控件的种类，在本例中它的参数分别为 text（文本）、password（密码）、submit（提交）。 <input> 可定义很多种“输入控件”，像电脑的 USB 接口，可接入很多输入设备，像键盘、音响、鼠标，更换 <input> 的控件种类，我们只需更换其 type 属性的参数就行了。
<input> 是表单元素世界的半壁江山，除了上面这三种 type，还有单选框、复选框、文件选择、颜色选择等丰富的参数供我们程序员选择。
在这些控件中， 若我们某控件的标签属性中加上 required 属性，则这一项必须填写，否则点击提交按钮时无法生效，像例子中的“账号输入框一样”，我们可尝试在输入框为空情况下点击“登录”按钮，看看浏览器是否出现类似告诉我们“此项必填”的提示标识。
value 是控件的“值”， 在不同控件中有不同的含义，输入框中的 value 是输入框内的默认内容，而按钮的 value 是按钮上的文本。
表 2-32 中有几个常用的 <input> 控件的 type 参数。当然，HTML5 规范中新添加的 <input> 控件非常多，且实用又好玩 ，感兴趣的小伙伴可网上搜索，研习一番。

控件描述	type 类型
单行文本输入框（ <input> 默认 type）	text
按钮	button
复选框（可勾选多个值）	checkbox
文件	file
隐藏	hidden
数字	number
密码	password
单选框（只能选一个值）	radio
滑块（确定一个粗略的值）	range
提交	sumbit
表 2-32


代码清单 2-31 是表 2-32 中各 <input> 控件的使用示例，我们可以分别尝试一下，体会其中各个属性的含义。

代码清单 2-31
<!-- 文本框： -->
<input type="text" name="username" placeholder="输入用户名" />
<!-- 按钮： -->
<input type="button" value="一个按钮" />
<!-- 复选框： -->
<input type="checkbox" id="sport" name="tag" />
<label for="sport">运动</label>
<input type="checkbox" id="movie" name="tag" />
<label for="movie">电影</label>
<!-- 文件： -->
<input type="file" name="image" accept="image/*" />
<!-- 隐藏： -->
<input type="hidden" name="articleId" value="103" />
<!-- 数字： -->
<input type="number" name="qq" value="123456" />
<!-- 密码： -->
<input type="password" name="pwd" value="password" />
<!-- 单选框： -->
<input type="radio" name="gender" value="male" />男
<input type="radio" name="gender" value="female" />女
<!-- 滑杆： -->
<input type="range" name="volume" id="volume" min="0" max="100" />
<label for="volume">音量</label>
<!-- 提交： -->
<input type="submit" />

最终它们的显示效果如图 2-33 所示。
图 2-33
文件选择控件 <input type="file> 中的属性 accept 指代可选择的文件类型，例子中的 image/* 是一个MIME 类型（多用途互联网邮件扩展类型），指所有图片文件。表 2-34 是常用的一些 MIME 类型，需要更多的话可查询互联网。当然， 如果在项目中需要更灵活自由的配置，可直接在 accept 的参数中把想选择的文件后缀名写上，如 accept="image/*、.doc,.txt"（支持所有图片文件、.doc 与 .txt 后缀文件），不同文件类型使用半角逗号隔开。

类型名	描述	使用案例
text	人类可直接阅读的普通文本文件。	text/* ：所有支持的文本文件text/plain：TXT 纯文本文件
text/css：CSS 文件

application	某些二进制的数据文件。	application/pdf：PDF 文件
image	图片文件	image/*：所有支持的图片文件image/png：类型为 PNG 的图片
image/webp：谷歌推出的一种体积极小的图片格式

audio	音频文件	audio/*：所有支持的音频文件audio/mpeg：类型为 MP3 的音频文件
audio/wav：类型为 WAV 的音频文件



表 2-34

传统上，提交按钮一般与 <form> 搭配， <form> 负责声明表单框架， <input type="submit"> 负责让用户点击提交，它们组成 form 表单提交形式与后端进行交互。如今我们也经常在页面中使用 JavaScript 的方式与后端交互，叫 Ajax（异步 JavaScript 和 XML），可实现页面在不跳转刷新的情况下将数据提交到后端（如我们所见，使用 form 表单提交形式，页面会跳转，而若使用 Ajax 就不一定了，可以通过 JavaScript 脚本自定义），那时我们不需要再写 <form> 和 <input type="submit">，想提交数据，直接在 JavaScript 脚本中自由定义动作， 因此我们要知道 <form> 和 <input type="submit"> 并非表单元素的必需品。
除了与后端交互数据，表单也经常参与页面中的 JavaScript 脚本动作与用户交互，最显著的例子如网页小游戏，此时也没必要写 <form> 及 <input type="submit"> 。
讲一个扩展知识。与后端交互除了使用 GET 和 POST，还有比较时兴的新技术 WebSocket，打个粗糙的比喻，如果 GET 是发电报请求资源然后等待回应，POST 是发快递然后等待回应，那 WebSocket 就是相互打电话，只要接通电话就能自由“聊天”， 主要区别为 WebSocket 是可以让服务器主动向用户端发出请求（而不是像 GET 和 POST 一样一遍遍请求服务器）。比如我们玩游戏时，如果我们想得知现在敌人移动了没有，如果使用 GET 或 POST，只能每隔几毫秒询问一下服务器敌人的坐标，然后分析数据，而使用 WebSocket，服务器会在敌人移动时主动向我们发出请求（注意，是“主动”），告知我们敌人已移动。因为这个优点，很多浏览器上的聊天室和游戏就是使用的 WebSocket 技术。
在 HTML5 中，有一些 <input> 标签可被新标签代替，如 <input type="button"> 可被 <button> 代替，当然两者都有效， 但 <button> 可直接在标签里写显示在按钮上的内容，或其他自定义 html，比如一张图片，可尝试运行代码清单 2-32 中的内容。

代码清单 2-32
<button>
一个按钮
<img style="width:10px;height: 10px;"
src="//ccgxk.com/langh.png"
alt="langh" />
</button>

最后的运行效果如图 2-34。该效果在 <input type="text"> 中则很难去实现。
图 2-34
当然，还有一些输入表单元素，自始至终很难直接以 <input> 搭配 type 属性的形式来定义，如常用的文本输入域（“大号”文本输入框） <textarea>、下拉列表选择器 <select>，下面我们分别了解一下。
（3） <textarea>：文本输入域
当然， <textarea> 的用法与 <input type="text"> 差不多，不过学习表单的第一例我们制作了一个 form 提交案例（仿真“百度一下”），那么在 <textarea> 中我们来做个迷你小工具，即“文字替换”功能，顺带学习了怎么使用 <textarea>。
菜终于上到一定程度， 自此我们的前端旅程终于踏入与用户交互的阶段，可以做一些真正意义上有用的东西，而不再是捏一个个只供欣赏的花瓶。
运行代码清单 2-33 中的代码。

代码清单 2-33
<textarea id="myText"
cols="45"
rows="12"
autofocus
placeholder="文本粘贴到此处以操作">
</textarea>
<div>
<input type="text" id="a" /> ==>
<input type="text" id="b" />
<button onclick="
myText.value = myText.value.replaceAll(a.value,b.value);
a.value = '';
b.value = '';
">替换</button>
</div>

最终运行结果如图 2-35

图 2-35

这是一个很实用的小应用，我们使用计算机办公时会经常遇到替换文字的场景。我们把文本粘贴到文本域中，之后在下面两个文本框中分别输入“替换前的文本”、“替换后的文本”，鼠标单击替换，文本域中的文本就会自动变成替换后的文本。
先看 <textarea>。相较 <input>，这里多了几个属性 cols、rows、autofocus。 cols 是列（column）的意思。 这里的“列”以全角字符（比如汉字）为基准，即一个汉字的宽度为一列的宽度，cols="45" 即该文本域一行最宽只容纳 45 个汉字字符。
rows 为行，这个好理解。
而写上 autofocus 则可使这个文本域在页面加载完毕时自动激活，方便我们打开页面进行粘贴（当然这个属性在 <input type="text"> 中一样有效）。
接下来是 JavaScript 脚本的简单解释。第一句的意思很简单，myText 即我们代码中 ID 为 myText 的文本域元素，myText.value = 'xxx' 这句代码可以把我们 myText 文本域中的内容改为 xxx，换言之，等号右边的内容（xxx）会在文本域中显示，我们也可以尝试运行一下 myText.value = 'xxx' 这句代码。
但可能让人迷惑的是，等号右边的 myText.value 是文本框当前的文本，与等号左边不一样。（a 元素、b 元素一样的道理），myText.value= 可理解为一句命令，这句命令右边的内容是它的参数。
myText.value.replaceAll() 右侧的 replaceAll() 是一个 JavaScript 内置函数，如果一个字符串 "abc" 经过这个函数处理，如 "abc".replaceAll("a","b")，那么最终这个字符串中所有的 "a" 都将变成 "b"， "abc".replaceAll("a","b") 和字符串 "bbc" 这两段代码是等同的（就像“初中数学”里的 cosπ 和 -1 是等同的）。

代码清单 2-34
"abc".replaceAll("a","b")  等同于  "bbc"

本例程序中一样的道理，myText 元素的文本将被改为 myText 原有文本经 replaceAll() 函数处理后的结果，而处理的方式就是把 myText 原有文本中 a 元素的值全替换为 b 元素的值。 后面两行，则如第一行一样，分别清空 a 、b 的值。
当然，看不懂没关系，后面我们会在 JavaScript 的简单入门中慢慢了解它。
（4） <select>：选择框
选择框也是表单中很常见的元素，比如我们在填写快递地址时，我们会选择几个选择框来分别选出地址对应的省、市、县，然后再填写详细地址。
这个元素的呈现效果，是在几个固定的选项中选择某一项，所以使用上面的 <input> + value 等属性来表示这种结构就有点力有未逮了，于是 HTML 语言有了这样一种类似 <table> 一样通过几个标签的组合的“选择框”元素组合组成的选择框 HTML 组合，即 <select> + <option>。
后者 <option> 是我们详细的选项内容，如果我们需要对后者分类的话，可以使用 <optgroup> 将 <option> 同一类别的进行嵌套以分类，这个不再演示，感兴趣的伙伴可以在进行完下面的例子后尝试一下。
下面我们来将上述例子进行进一步完善。因为有这样一个小需求，我们替换文字时，可能并不需要将我们的替换操作数据（即 a、b 文本框里的内容）清空，所以我们使用 <select> 来制作一个选择选项，让用户决定是否要在替换后把替换操作数据清空。最终代码如代码清单 2-35 所示。

代码清单 2-35
<textarea id="myText"
cols="45"
rows="12"
autofocus
placeholder="文本粘贴到此处以操作">
</textarea>
<div>
<div>
替换完后
<select id="myOption">
<option value="not_empty" selected>不清空</option>
<option value="empty">清空</option>
</select>
替换输入框的内容
</div>
<input type="text" id="a" /> ==>
<input type="text" id="b" />
<button onclick="
myText.value = myText.value.replaceAll(a.value, b.value);
if(myOption.value == 'empty') {
a.value = '';
b.value = '';
}
">替换</button>
</div>

相比上例，这里有两处修改，一是在下面两个输入框的前面添加了 <select> 输入框的 HTML，二是在 button 的后两行添加了一个 if 判断语句。
这样，在运行 JavaScript 脚本时，会在替换后判断一下我们的 myOption 选择框的值是否等于 empty，若“等于”，就执行后面的两行语句。
在 <option> 中，有一个 selected 属性，如果元素的属性中有该属性，那么就会将该值（如“不清空”）设立为该选择框的默认值。
至此，我们已将 HTML 语言的简单使用部分讲完，这些内容足以应付我们 HTML 编写中的相当大一部分。当然 HTML 是很简单的语言，除了这几节的内容，它还有相当多的标签和属性，不过 HTML 不像其他编程语言或者古代的八股文那般有大量细节要花很长时间背诵、练习、感悟， 对于 HTML，只要我们像前面的例子那样先了解了它的编码思想，需要其他内容时，直接上网查各种手册就行了。
2.3 快速入门 CSS
2.3.1 一个小案例学完 CSS 的常用元素
在前面关于 HTML 入门内容的很多例子，我们用到了 CSS，比如最开始对 HTML 基本结构的解析中，我们初步尝到 CSS 中的伪类、CSS 在 HTML 中的位置等概念，在表格 <table> 中，我们又看到了很多生僻的英语单词（一些 CSS 属性）......当然，我们只是跟着例子写，但不知这些内容在“CSS 天地”中占据怎样的位置，以及我们应如何去学 CSS。
从现在开始，我们可写一定复杂度的 HTML 了，就像“博物馆”已建好，文物已就位，为使“博物馆”在众竞争对手中得势，我们需要使用 CSS 装修、美化我们的“博物馆”观感视觉体验。现在是入门学习 CSS 的好时机。
（1）层叠的概念
CSS 中文学名“层叠样式表”，英文是 Cascading Style Sheets，后面三个字“样式表”，像游戏中我们角色的属性表：身高多少、杀伤力多强、服装什么颜色、移动速度多快，我们可通过一定方式调节某个角色的属性，类比 CSS ，即我们可通过敲 CSS 代码，来控制我们的网页元素的属性。
而前面的“层叠”则是 CSS 的灵魂，顾名思义“层层叠加”， 我们在前面定义了一个方块的颜色是“红色”，后面我们还可再把这个方块的颜色重新定义成“蓝色”。
（2）常用的样式属性
在语言学中，有一个定理，叫齐夫定理，即任何语言中，任何单词的词频，都与该单词在词频表中的排名保持一个固定比例。它的一个推论是，一门语言中的常用词汇，会占据这门语言的很大一部分。对于世界大多数语言，100 - 150 词频最高的单词，会占据这门语言文本中的 50% 左右，只要我们学会词频高的词语，那么我们会在很短时间内，初步上手这门语言。
同理，我们也可将 CSS 中最常用的属性在一个很简单的项目一起使用，这样我们就能快速入门 CSS 了。
现在我们来做一个“放假通知”页面的项目。这个项目中所用到的 CSS 属性可以覆盖大部分 CSS 工作中的 80% 左右的 CSS 代码，不仅让我们能看懂很多网页 CSS 代码，也足以让我们上手 CSS 做很多漂亮的页面。
我们将通过完成一个个小目标，进阶实现我们的效果，当然也先提前说明， 下面这几小节的代码仅为学习 CSS 属性的使用，未做工程优化。
（3）设计 HTML 结构
假如现在的场景是，2021 年难得的中秋国庆“双假合璧”放假前，我们是某市某小学的网站负责人，接到领导通知，我们需要在官网上放出一个漂亮的放假通知页面。
我们新建一个 html 文件，html 头部的 <title> 内容为“放假通知”。接着在 <body> 中写入以下代码。

<h1 class="header">XX 市<em> XX 小学</em>网站</h1>
<div class="card shadow">
<h2 class="card-title shadow">放假公告</h2>
<p class="card-call">尊敬的<em>家长同志</em>：</p>
<p>新学期伊始，中秋、国庆双节将至，根据政府有关通知及学校教研组的研究，现将我校 2020 年的“十一假期”安排通知如下：</p>
<p>一、10 月 1 日至 10 月 8 日放假，共计 8 天，10 月 9 日正常上课。</p>
<p>二、学校各工作部门加强对学生的安全教育工作，确保掌握学生节假日期间去向，保障学生的安全。</p>
<p>三、妥善安排值班和安保防卫工作，值班人员应坚持 24 小时值班制度，如有重大事件，及时上报市教育局办公室。</p>
<p>四、合家团圆期间，各家长做好安全防范工作，督促孩子及时完成假期作业。</p>
<p>预祝各位同学和家长们，中秋国庆快乐，阖家幸福！</p>
<div class="card-info">XX 小学<br>2020/9/28</div>
</div>

浏览器对这些代码的渲染结果如图 2-。
与之前章节的例子不同，这次 HTML 中有了很多 class 属性， 这是在为原本独立的它们进行归类命名，方便写它们的 CSS 代码，比如我们给“放假公告起名”归类为 card-title，即“卡片的标题” ，我们想让公告内容放在一张好像卡片一样的画面里。每个元素可以定义多个 class 属性值。
（4）页面元素的简单排版
只写 HTML，其显示效果倒也算清晰明，但不漂亮。接下来我们使用 CSS 对页面元素进行大小、居中位置的排版。在 <head> 中添加 <style> 标签，并在其内写入下面的 CSS 代码。当然， /* xxx */ 这种属于 CSS 中的注释内容，我们可不在代码中抄写。

/* 位置和大小排版 */
body > h1 { text-align: center; } /* 一级标题居中 */
body > * { margin-top: 25px; }    /* 所有 body 标签子元素都有 25px 上边距 */
.card { margin-inline: auto; }    /* card 类标签页面居中 */
.card { max-width: 720px; }       /* card 类标签页最大宽度为 720px */
.card p { text-indent: 2em; }     /* card 类标签的后代 p 标签首行缩进 2em 空间 */
.card-title { text-align: center; } /* “卡片”内的标题居中 */
.card-info { text-align: right; }   /* “卡片”内的“落款”信息右对齐 */
.card-call { text-indent: 0!important; } /* 称呼没有首行缩进 */

我们再运行这个页面，会发现结果整齐了很多。有没有感觉像打开了新世界？
我们看一下代码怎么写的。
首先是 CSS 选择器语法。CSS 基本的语法是这样， 一个 CSS 选择器后面接一个花括号，其内写一条条样式规则（或属性），每条样式规则以半角分号结尾。在本例，其 CSS 选择器语法可总结为下面几条。
1、类型选择器：像 <body> 这样的标签，我们直接写 body {....} 就可以选中它了。
2、类选择器：定义了 class （类）的标签，如 <div class="card">，我们使用 .card 就可以表示它，从而编写它（们）的 CSS 样式
3、子代选择器：表示某种标签的子代某种元素，可以使用 A标签 > B标签 {...} 这种形式，如 body > h1 {...}，应注意，子代元素的子代元素，是无法被选中的（所谓子代就是被嵌套的元素，比如 <div><img></div> 中的 <img> 就是 <div> 的子代元素）。
4、通配选择器： body > * 中的 * 是一种通配符（在后面学习正则相关内容时，我们会深入了解通配符的概念），它表示任何标签。显而易见， <body> 标签的所有子代元素都将被这段 CSS 代码选中。
5、后代选择器：比上面的子代选择器要强大，只要是某个标签的后代（即子代的子代也算其中），都可被选中。其形式如 body p {...}，这样只要 p 元素符合 body 元素后代这个条件，就可被选中。
CSS 选择器其实还有很多语法，且 CSS 语法可使用很多写法达到同样的选择目的， 这也注定 CSS 选择器其游戏规则人人都易懂，但内部潜在的“江湖规矩”会有很多。在之后的章节，我们会有很多办法优化在复杂项目中使用 CSS 选择器杂乱的问题，但在学习的一开始，请先牢记我们的首要原则： 简单、再简单，越简单越好！（原因很简单，数学中混沌学理论有一个结论：“复杂系统不可预测，也无法维护”。我们要养成好习惯，尽可能避免让我们的代码结构向更复杂发展，如果无法避免，也一定让复杂部分尽可能与其他代码之间隔离开来）
接着是花括号里面的内容，即一条一条样式规则。在这个小阶段，我们首先碰到的是居中问题。在基础阶段，CSS 有两种简单的居中方式，magin: 0 auto; 居中法和 text-align: center; 居中法。这两者分别用于“ 普通块级 HTML 标签居中显示”和“ 文字居中显示”。
后者专为“文字居中显示”设计的 text-align 有三个主要值，right、left、center，可理解为对应我们 Word/WPS 软件中右对齐、左对齐、居中对齐的文字对齐方式。
可是......前者用于“普通块级 html 标签居中显示”的代码中的 margin 是什么神奇的东西？这就要了解一下 CSS 的“基石理论” ---- 盒模型。
（5）盒模型和 margin: auto; 居中法
HTML 页面上的每个元素，都如有一个虚拟盒子包着它，根据 CSS 设计的初衷，就像数码店商品货架上一个个硬纸盒装的头戴耳机一样。我们抽出一排，来个抽象的俯视图，其中是三个专有英文名词的抽象解释，如图 - 所示。
当然，换到实际应用场景，我们可在一个空白 html 中写两个 <span> 元素，然后赋予它们 5 像素宽的实线边框（border）、5 像素外边距（margin）、10 像素内边距（padding）。如代码清单所示。

<!-- head 中的部分，CSS 样式 -->
<style>
span {
border: 5px black solid;
margin: 5px;
padding: 10px;
}
</style>
<!-- body 中的部分，HTML 代码 -->
<span>我是A</span><span>我是B</span>

里面的 padding 和 margin 样式规则我们可尝试一个一个添加，观察一下各自的运行效果，如图xx所示。
相信现在，我们对这三个属性已有初步的感性认识。
CSS 样式规则可以简写。显而易见，margin 有上、下、左、右四个方向可定义，我们可像代码清单xx中的两个案例那样编写。

/* 案例一：上 3px 右 4px 下 5px 左 6px（顺指针方向）的外边距 */
margin: 3px 4px 5px 6px;
/* 或者 */
margin-top:    3px;
margin-right:  4px;
margin-bottom: 5px;
margin-left:   6px;
/* 案例二：上下 5px 左右 10px 的外边距 */
margin: 5px 10px;
/* 或者 */
margin-block:  5px;
margin-inline: 10px;
/* 案例三：一个大家永远也用不到的知识点 */
margin: 5px 10px 20px;
/* 或者 */
margin-top:    5px;
margin-right:  10px;
margin-bottom:20px;
margin-left:   10px;
/*注：padding 的写法也与此一样 */

此时有意思的来了。margin 的参数除了可以是类似 5px 这样的长度类型外，还有个极其强大的 auto！ auto 的中文是“自动”，在 margin 中我们可理解为“可用空间”，比如有个块级元素（如 <div>，这个属性只对块级元素有效），如果已有 margin-right: 5px; 了，此时设置 margin-left: auto;，会造成右对齐效果，且距离右边界 5px，因为此时它的左边距是它左侧一切可利用空间的长度。
当然对于它的更多用法其实没有更深的探索意义了，因为 W3C 对这个参数的限制很多，我们无法稳定按照“可用空间”这一含义使用它，比如为某元素设置 margin-bottom: auto; 会发现其下边距竟然还是 0，在实际开发中，我们一般只使用它的“居中魔法”。
其“居中魔法”其一“水平居中魔法”就是设置相应元素左右边距都是 auto，如我们“放假通知”案例中的 margin-inline: auto;，因为左右两边都在争夺可用空间，力均势敌、旗鼓相当，终导致元素居中，当然还有“垂直居中魔法”，这个我们后面再讲。
（6）最大宽度和 CSS 长度单位
接下来是 max-width 和 text-indent，这两个很简单。
max-width 我们在之前学 <img> 元素时使用过， 这个属性就是专为移动设备屏幕而生的。电脑屏幕上可显示比较复杂的布局，因为电脑屏是横向的，且很大，如报纸一样，但移动设备的屏幕很小，若一些图片宽度很大，在电脑上看起来正常，但手机上只能显示一部分时（这种 bug 也叫“元素溢出”），这个属性就可派上用场： 限制图片宽度的上限，防止出现溢出现象。
换到其他元素也一样。像我们“放假公告”例子，限制了最大宽度，在手机上也能正常显示“卡片”。
而 text-indent 也容易理解，即首行缩进。但是后面的参数 “2em” 我们可能会很陌生。我们知道 px 是屏幕像素的意思，那 em 是什么？
1px 是一种绝对单位，像物理世界中的“毫米”一样，不会改变长度。 1em 是相对单位，我们可理解为元素所处位置的字体大小。比如我们在某个地方定义了 font-size: 50px，那么我们在那里再定义 em 时其 1em = 50px（默认情况下字体大小是 16px，因此大部分情况， 1em = 16px）。
很显然， 2em 就是两个中文字体的宽度， 200em 就是 200 个中文字体的宽度。 毕竟 CSS 是为内容服务的，而内容中，文字是最主要的，我们想首页缩进 2 个字符，那使用 em 就行了，毕竟如果使用 px，那哪天字体大小一改，还得记住要改这个字体缩进大小。
和 em 类似的是 rem，即“root em”，基于根部元素（root）定义的字体大小。root 是最根级的元素，它的 CSS 属性会影响到所有的元素，因此在整个 html 中，1rem 的值是固定的。 这个貌似很鸡肋，好像是变相的物理绝对单位一样，其实我们经常使用它来计算字体大小，毕竟 16px、18px 这种有点难算。直接使用 1rem、1.5rem ，非常方便。2rem 就是两倍字体大小。
绝对单位还有“vw”、“vh”、“%” 等，其中前两者我们在前面遇到过， 100vw = 浏览器窗口宽度、 100vh = 浏览器高度，而 “%” 则类似，只是将“浏览器”换成了“父元素”。像上面的 max-width: 100% 就是指的其对应元素最大宽度为其父元素所能容纳的最大宽度。50% 则是其父元素所能容纳的最大宽度的一半。如代码清单 xx 所示，后面不加单位，和 % 作用类似，只是需要一个单位换算。

max-width: 75%
/* 等价于 */
max-width: 0.75
/* 75% 和 0.75 都是使用绝对单位的值，且两者相等。 */
/* 不过笔者更建议使用 % */

顺带一提，也有一种说法把 px 看做是相对单位，因为 1px 在实际设备上的显示并不是真实的 1 个像素格，而是一种虚拟概念， 简单来说，物理世界的屏幕内部机器会根据实际需要调整真实 1px 的显示大小，不同分辨率，不同规格的屏幕，大小可能各有不同。
当然，em 是中文字体的宽度，但不是英文字母的宽度。在英文世界中，这个问题略有复杂：若英文字体是等宽字体，那 0.5em 就是英文字母的宽度，若是非等宽字体，则应使用 ch 这个单位，1ch 是该字体中一个 0 字符的宽度。
（7）超然物外的 important 规则
在《放假公告》的“尊敬的家长同志：”称呼语部分，笔者使用了 important 规则，即参数后加 !important。
我们知道，CSS 是有层叠性的，比如某项目在前 100 行写的规则，在第 300 行我们还能对它进行改写。 然而，人脑肯定无法直接记住我们写出的大量 CSS 代码的所有细节，所以我们很多时候写的代码会不小心覆盖之前某些元素已定义的样式（或可理解为冲突），随着这种看不见的“意外”日积月累，我们的项目内部会变得越来越乱。
而 !important 规则可使某元素的某样式“超然物外”，摆脱这套“层叠”的规则，即这个规则将不会被后面的传统 CSS 代码覆盖。如代码清单xx，被注释标记的那行样式不起效的原因，正是它的 font-size 属性已被声明过，且上次声明时加了 !important 规则。

.notice-font  {
font-size: 18px!important;
}
/* 此处省略 500 行 CSS 代码 */
.notice-font .large {
font-size: 24px;  /* 我们会发现，这句样式是不起效的 */
}

!important 规则影响下的 CSS 样式若想被层叠覆盖，只能再次被 !important 规则声明，这个操作很像“另起灶炉”，重新建立一个独立的秩序，我们可以预见，如果某天为想摆脱 CSS 的复杂层叠产生的代码结构混乱而广泛在 CSS 代码中使用 !important 规则，会造成更严重的代码结构混乱。
因为 CSS 代码是不能乱改的， CSS 的代码不像传统编程语言那样线性，CSS 更像是张高维世界的蜘蛛网，纵行之间维持着妙不可言、密密层层的关系，若我们贸然因为一颗“小芝麻”问题在某已成规模的 CSS 代码之间删减内容，即使调试一下好像没啥，但也可能潜在地一石激起千层浪，为后续开发、维护留下很多祸害。
但不容质疑，该规则依然是一把利器。对于它的禁忌和建议使用场景，简单来说有四个。
1.永远不要在覆盖整个站点且亘古不变的 CSS 文件（或文件某部分）中任何地方使用 !important。
2.永远不要在会被其他网页引用的 CSS 文件中的任何地方使用 !important。
3.如果确定一个元素的某个规则就某形式（比如“信”中“问候语”不用首行缩进），且 CSS 位置不属于上面两点，可以考虑使用 !important，比如某个特定页面的非公共 CSS 的“信”中“问候语”部分。但也不提倡。
4.如果要解决的 CSS 问题，无法接触修改相关 CSS 文件、且无法通过 CSS 层叠规则（优先级）解决，实在万不得已，可以使用 !important 这个工具。
顺便一提，经笔者的测试， important 规则无法为 :root、 html、 body 等这种特殊的“选择器”服务，可能就是为防止被滥用吧。
（8）设置颜色和各种文本样式
我们利用 CSS 将我们的《放假公告》页面进行了排版，但一眼看去依然单调，所以我们要对其进行一个简单的“包装”：添点颜色、修修文字，让其看起来更美观些。
如之前的操作，我们将代码清单 xx 中的内容追加到我们项目的 <style>。

/* 添加颜色和设置字体 */
body {
font-family: sans-serif;      /* 无衬线字体 */
color:#444851;           /* 字体颜色 */
background-color: #f9fafa; /* 背景颜色 */
}
em {
font-weight: bold;   /* 字重为粗体 */
color:#12b991;
font-style: normal;  /* 字体风格为默认 */
}
.card {
padding: 25px;
background-color: #eeeeee;
font-weight: bold;
}
.card-title {
color: #e6e2c7;
background-color: #f55d3f;
line-height: 90px;     /* 行高 */
letter-spacing: 4px;  /* 字间距 */
font-size: 45px;
}
.card-call {
font-size: 20px;
}

在浏览器中运行我们的代码，结果如图。
很明显，这次我们会感觉页面有了一点风格，整体上了一个档次。这就是 CSS 的力量。通过键盘敲下几个字符，就能让一片索然无味的抽象 HTML 结构，有了属于自己的生命。同一个 HTML 在不同的 CSS 艺术家雕琢下，能呈现各具特色的形象。
当然，这也是额外发明一种样式语言 CSS 的意义所在，本来像这种更丰富的效果，完全可以和 HTML 字里行间捆绑到一起，但使用 CSS 让效果独立于 HTML 存在的话，我们可以在 HTML 不动的情况下，按照心情，一天换一套 CSS 代码，就像更换游戏中英雄的皮肤一样（若确实考虑这样做，那 HTML 可必须谨慎地去写，尽一切可能保证其 HTML 代码不被频繁修改，否则一旦改版，很可能之前的一天一换的那一系列 CSS “皮肤”就全失效了）。
这不得不提 Web 设计的“启蒙”网站 --- CSS 禅意花园（ www.csszengarden.com ），它由加拿大艺术家 Dave Shea 建立于 2003 年。网站提供着一份很干净的 html 文件，内容是 Dave Shea 个人对 CSS 的思考和一份倡议，倡议全球各地的艺术家为这份 HTML 文件设计 CSS 样式，并提交至该网站。待各艺术家的作品被通过后，Dave Shea 会将其摘录到这个网站上，比如 www.csszengarden.com/212/ 或者在网站链接页面留下作品的网页链接 ，以供全球网页艺术家欣赏借鉴。这个网站对后来世界 Web 设计领域影响很大，它不仅让人们意识到 CSS 的强大和魅力，更让很多优秀的 CSS 代码编码思想和对一些 CSS 的新旧特性灵活运用经验传承了下来。
这次我们要学的大都是关于文本的样式。首先值得说的是字体， font-family 可指定我们某个标签文字内容的字体，其属性值类型一般有两种，“ 通用字体族名”和“ 普通字体族名”。
我们本例代码中的 sans-serif（无衬线）是一种“通用字体族名”， 该字体可理解为一种给浏览器的提示，而不是某种具体的字体，具体使用哪种字体显示，由浏览器决定。以下是几个常用的通用字体族名解释。

	
	
	
	

通用字体族名	解释
serif		衬线字体。在笔画上有边角装饰，笔画粗细不同，有明显笔锋，如“Palatino Linotype”、“URW Palladio”、“宋体”。（CSS 属性值中“宋体”可写为“SimSun”）

sans-serif	无衬线字体。笔画平滑，与衬线字体相对。如“Open Sans”、“Fira Sans”、“Arial”、“黑体” 。（CSS 属性值中“黑体”可写为“SimHei”）
monospace	等宽字体。我们在前面讲 <code> 标签时曾遇到过，即每个字母都有着相同宽度的字体。如“Fira Mono”、“Lucida Console”
system-ui	浏览器默认的用户字体


除此之外，还有 cursive（连笔字体族）、fangsong（中文仿宋）、fantasy（艺术体）等，但这些用得不多。
不过相比“通用字体族名”，使用“普通字体族名”则更精准，我们可直接写出我们想要的字体名。这两者的写法区别是，后者需加引号。当然，浏览器允许我们在声明后写很多属性值，这样浏览器在运行时，会逐字按我们属性值里条目的先后顺序依次检测，如果有效就选用，像高考后的平行志愿录取制度一样（一定要注意， 是逐个字检测，而不是全局内容使用某个字体，除了电脑默认的几个字体，大部分汉字字体，其字库无法覆盖所有汉字， 如一些生僻的人名用字就无法显示，只能退让给后面支持的字体显示），毕竟每个人的电脑上不一定都安装了某个字体，这样做更保险。
具体示例如代码清单所示。

/* 一个无衬线字体“黑体”的样式设置案例 */
.heiti {
font-family: "Microsoft Yahei", "STHeiti", sans-serif;
}

“Microsoft Yahei”是微软雅黑，“STHeiti”是华文黑体，这两者是常见的“黑体”字体，也是普通字体族名。当浏览器无法在系统中找到这两者时，会使用系统支持的某些无衬线（sans-serif）字体，比如几乎所有系统和平台都通用的“SimHei”。sans-serif 是通用字体族名。
那什么是“衬线”和“无衬线”呢？衬线字体和无衬线字体其实是西方拉丁字体的概念，以下是对它们的简单描述。
衬线字体：起源于古罗马的石雕，因为当时书写工具结构的特殊，其书写笔迹上会被留下一些显眼的痕迹，比如结尾处的一些修饰笔画或粗细不同的笔画，这些“艺术修饰”叫衬线，固该系列的字体叫衬线字体。人们发现它们辨识度和可读性很高，且有一定艺术感，后来在印刷术盛行后被广泛采用到印刷物的母版雕刻上，随着人们工业化的发展，文化交流频繁， 衬线字体逐渐成为人们日常生活中最常见的印刷字体。
无衬线字体：没有像衬线字体上的各种修饰物，是很纯粹的均匀流畅的字体。虽然几个世纪来实体书籍读物、广告海报等让人们对衬线字体的形象很熟悉，但在电子设备出现的早期，显示屏的屏幕解析度和像素密度很低， 显示这些包含丰富细节的衬线字体会很困难，此刻，没那么多修饰的无衬线字体则完美胜出，固无衬线字体开始在电子设备的显示中流行。 几十年来，一直到今天，无衬线字体一直是电子设备屏幕的主要显示字体。我们网页上看到的大多数字体都是无衬线字体。
当然，上面两段都是讲的西方拉丁文，与之对应的中文字体也有。
衬线字体即从明朝开始一直作为“中文正统印刷”字体的宋体字（本书的印刷字体也主要由宋体字构成），由木版雕刻时刀的刻痕得来的字体上各种修饰而形成，因为其“横细竖粗撇如刀,点如瓜子捺如扫,横笔末端小三角”很美观端正、结构严谨，像阅兵队伍一样整整齐齐，更重要的是易辨认，看久了不容易眼累，所以几百年来在中文印刷物中一直很流行，是中文印刷字体的主力军。
而与之相反的 20 世纪出现的新颖的“黑体字”则被归类为无衬线字体。目前比较流行的等线字体（Arial，每条笔画的宽度都相等），也属于黑体。
现在我们由于频繁看电子设备，在阅读敏感度上对无衬线字体可能更高， 所以一般我们在普通内容的字体设置上，默认保持无衬线字体。当然，若某些内容需要表现一种艺术、复古、文学等感觉，可选择衬线字体。至于“仿宋”、“楷体”（KaiTi、STKaiti），由于当下时代主导地位不及前两者，所以一般不作为内容正文使用。
图xx只是演示，只局限于计算机，并不是宋体、黑体的标准样式，每种场合都有适合自己的字体，宋体只是如“衬线体”的一种风格，如计算机显示的宋体和出版物印刷的宋体就有很大区别，计算机上通用的“宋体”可能受像素点的显示机制影响而被做过一定优化，在印刷物上也有书籍专用的“书宋”、报纸专用的“报宋”等。作为信息传递的重要媒介，字体的任何细微的粗细变化都会极大影响信息的传播速度、质量，这一点相信各位在看一些字体混杂的低劣 PPT 演示时会感同身受， 所以千万不要忽略字体选择这个细节。在后面章节我们会学到如何在 CSS 里导入自己的字体。
接下来是颜色的样式设置。其中 color 属性指文本颜色。可推断在互联网早期，浏览器上主要显示的是文字，所以 CSS 直接规定 color 指文本颜色，而不是 font-color（CSS 中也没这个属性）。
background-color 属性指背景颜色，这两者后面的属性值，如 #444851，是 16 进制颜色表示法（也叫 Hex 颜色代码），其基本格式如图xx，后面的数字分成三部分，分别代表该颜色成分中红、绿、蓝三者的参与程度。16 进制是目前最常用的 CSS 颜色表示法。我们可在很多软件、在线选色网站工具中获得某颜色的 16 进制表示格式，VS Code 也可在代码中直接选色，另外还有浏览器自带的开发者工具也可以。
举几个关于 16 进制颜色表示法的例子， #000000 是纯黑， #ffffff 是纯白， #ff0000、 #00ff00、 #0000ff 分别是纯红、纯绿、纯蓝。
网页设计领域有一个常识，即“背景”或“文字”的颜色不要使用纯黑或纯白，这样易造成视觉疲劳。因为纯白背景下的纯黑文字之间有着很大的颜色亮度落差，就像在一间黑房间内突然打开一盏强光灯一样刺眼，而适当降低这种落差会让阅读体验更好（比如使用深灰色来代替纯黑来设置文字颜色）。
当然，关于颜色的 CSS 属性值，还有很多类型，我们在之后章节再讲。
字重 font-weight，即设置文本的粗体、常规体状态，这些我们或许在 Word、WPS 等办公软件中遇过，在 CSS 中它与我们使用的字体是否内置不同字重数据有关（也就是各种粗细程度的字体数据），如果字体中只包含一种字重数据，那这个 CSS 属性将对其无效。表 xx 是它的常用属性值。
常用的属性值	描述
normal	默认值。常规情况下的字重。
bold		普通的粗体字符。
bolder	更粗的粗体字符。
lighter	比较细的字符。


当然，也可使用属性值 100、200、300 ... 900 来更精细调整字重（100 的倍数，一直到 900），其中 400 等同常规字重，700 等同 bold。因为不是所有字体都内置详细的字重数据， 固我们一般使用 bold。
font-style 属性定义字体的风格。视觉上有两种样式，正常体和倾斜。其有三个主要的属性值，如表xx。
		
属性值	描述
normal	常规的字体，无倾斜效果
italic	斜体字体，也叫意大利体。会选用字体开发商单独在字体数据中设置的字体斜体样式。如果字体中没有设置斜体样式，该属性值不会起效。

oblique	倾斜的字体（推荐使用），可理解为“人工斜体”，如果当前字体的字体数据中没有对应的斜体，则会通过算法生成一个倾斜的字体。


这个 CSS 样式可以中和 <em> 标签的效果，使其标签中的文本有 <em> 的“强调内容语义”却不使用浏览器默认的 <em> 的斜体效果。 理所当然，它也可为其他一些普通标签的文本设置斜体效果。
其实在字体文件的开发流程里，设计师是可单独设计每个字体的“斜体”效果的，因为在西方拉丁文世界中， 斜体并非单纯把字倾斜一个角度，而是一种独立的艺术效果，其中要考虑很多专业技术的细节，毕竟电脑僵硬地倾斜字体，效果肯定比不上设计师专门设计的倾斜字体漂亮。
顺便一提，中文、部分中国少数民族文字、日文等一些文字，文化上没有斜体这个概念，虽然也有部分细心的字体厂商也在其字体数据中单独设计了斜体艺术效果， 但笔者依然不提倡在中文文本中广泛使用斜体效果，否则会很突兀。
（9）简单的边缘修饰（圆角、边框、阴影）
网页的设计风格，一直跟随计算机 GUI 界面的设计风格变化，上世纪和本世纪初的网页，设计风格还是以同时代计算机 GUI 的彩色像素风和水晶拟物风为主， 2008 年后显示技术终于成熟，此时逐渐流行过去几十年人们魂牵梦萦、寤寐求之的 3D 拟物风，UI 上的元素越来越接近真实物体的质感，这个时代是 UI 精细化设计艺术的顶峰。但很遗憾，那时正当人们幻想 UI 还能怎么发展时，两个“庞然大物”突然消停了这份闹势。
2013 年左右 Apple 公司发布的 IOS 7 和 Microsoft 公司发布的 Windows 8，开启了一个“二次元”新时代 ---- 扁平化（Flat Design）设计时代（当然，这种设计风格并不是他们发明的）。可能因为拟物态设计耗时耗力让设计师叫苦连连，也可能是当时硬件计算力水平跟不上，也可能是人们已经看腻了拟物态。总之，从那时起，各种大小设计工作室争先恐后跟风，使这种扁平化简约风格一直流行到今天且不迭。
扁平化就是去除赘余的装饰效果（纹理、渐变、3D 等），保留信息的核心，强调符号化。说白了就是画个框、画个面，再画几个线条就是 UI 了，一眼望去，干干净净。不过，单纯这样设计（像我们上一小节设计的那样，有点漂亮，但依然很无趣）很容易让界面太抽象，人脑处理起来很费力，所以也要适当加些阴影和边角处理，营造景深、层次、精致，接近“拟物态”的一目了然。
本节要追加的代码很简单，如代码清单 xx 所示：

/* 简单的边缘修饰（圆角、边框、阴影） */
.card {
border-radius: 8px;
border: 1px solid #e5e5e5;
}
.shadow { box-shadow: 0 3px 9px 2px rgba(100, 100, 100, 0.5); }

显示结果如图 xx 所示。

（图片占位：一个截图）

阴影就像中国家常菜烹饪中的“白砂糖”，乱加很容易让菜肴败胃，但用好了，会让菜肴变得更可口。添加完适量的阴影后，我们的界面也加工得看着精致点了。
设计圆角，是源于人们趋利避害的本能。圆角有种天然的亲和感和安全感，也有助于聚焦人的视线，据相关研究，人眼视网膜中的中央凹区域更喜欢处理圆形边缘的物品。但圆角不能滥用，尤其是一些不重要的装饰品上，仅仅在需要让人们关注的核心区域用一下就行了，就像我们橙色背景的横幅上就不使用圆角了，否则会混乱画面结构，让人一眼看去主次难分。
当然，在阴影和边缘之间，也使用边框润饰了一个过渡区域，添加了一个灰色的 1px 细边框，这样看上去，我们的“公告栏”更有点立体了。
border-radius 这个属性，在 CSS2 的年代，能力很简单，和我们本案例中一样显然：设置一个 8px 的值，则浏览器会在形状四角都“打磨”一个半径为 8px 的圆角。
但到了现在的 CSS3 年代， border-radius 属性更专业了，它可以画椭圆圆角了！这种专业能力听上去在设计领域上好像并不实用，但其实已经广泛应用在 UI 设计中了，比如 iPhone 上 IOS 操作系统桌面的图标，就是使用的一种名为“平滑圆角”的超椭圆圆角，可让目光左右移动查看元素时，视觉流更加流畅舒适，这是一种微妙又耐人寻味的设计技巧。感兴趣的伙伴可在互联网上查阅相关内容。除此之外， border-radius 的椭圆圆角对于更复杂的设计稿还原其作用也很大，比如实现一些不规则图形和模拟水滴。

（图片占位：椭圆圆角示意图）

CSS2 和 CSS3 ......
这个属性在 CSS2 和 CSS3 中最主要的差别是纯圆和椭圆。 border-radius: 8px; 其实是一个简写，它的全文其实如代码清单 xx 所示：

border-radius: 8px 8px 8px 8px / 8px 8px 8px 8px;

border-radius 最多可接收 8 个长度单位的值，直接理解这 8 个值，有点困难，我们可以从简单开始。
在不考虑斜杠符号 / 的情况下，简写规则和 margin 差不多，如代码清单 xx 和图 xx 所示。

border-radius: 5px 10px 15px 20px;
/* 分别控制左上、右上、右下、左下四个角的圆角半径 */
border-radius: 8px 36px;
/* 分别控制左上和右下、右上和左下两个对角的圆角半径 */
/* 当然，也可以写三个值，不过用不到。多出来的第三个值只控制右下角 */

（占位图片：表示一下这两个案例）

斜杠符号 /，是开启椭圆圆角世界的钥匙。先从两个值开始，如代码清单 xx 和图 xx 所示。

border-radius: 60px / 20px;
/* 四个角都采用水平半径 60px 、垂直半径 20px 的椭圆圆角 */

（占位图片：表示一下）

而这个参数多了，则根据在代码中斜杠前后的顺序，两两相对，从左上开始到左下（顺时针），来控制四个椭圆角中一共 8 个位置的半径长度，如图 xx 所示。

（占位图片：表示一下）

当然上面这些属于繁琐的简写略写的内容，并不重要。接下来讲一个小重点：这个值是可以使用百分比值的！
百分比值也可作为圆角 border-radius 的值，如 border-radius: 50%;，这个在我们编码中很常用，它可直接把一个矩形图形变成一个圆形或椭圆。它的含义如代码清单 xx 所示。

<style>
.circle {
margin: 1em;
width: 100px;
height: 100px;
background-color: red;
border-radius: 50%;
}
.ellipse {
margin: 1em;
width: 200px;
height: 100px;
background-color: red;
border-radius: 50%;
}
</style>
<div class="circle"></div>
<p>一个正圆（半径为 50px）</p>
<div class="ellipse"></div>
<p>一个椭圆（水平半径为 100px、垂直半径为 50px）</p>

在 border-radius 里引入百分比值是很妙的，可能我们直觉上认为 50% 不就是一个浏览器计算好的数值吗，其实并不是，如代码清单 xx 的解释：

/* 一个抽象的解释 % 作用的案例，代码仅供说明，并不规范 */
.someClass {
width: a;
height: b;
border-radius: 50%;
/* 它等同于（注意!下面这行代码中的斜杠 ”/“ 不是指除号，而是”椭圆钥匙“斜杠） */
border-radius: (a 乘 50%) / (b 乘 50%);
/* 而不是 */
border-radius: (a + b) × 50% ÷ 2;
}

这里的百分比值，等同于一个具有斜杠符号的完整的 border-radius 值。这样会让我们在确定好圆或椭圆形状后，方便形状大小等比例缩放。
那一个新问题来了，若 border-radius 的值里既有百分比值，又有“椭圆钥匙”斜杠 / 呢？笔者过去真曾看过有人这样写，确实令笔者印象深刻，其内容大概如代码 xx 所示，其实这样写也是正确的！这样做会方便一些不规则图形在确定好形状后的等比例缩放。

border-radius:     40% 60% 60% 40%
/ 
30% 35% 70% 45%; 
/* 等同于 */
边框圆角: (a 乘 40%) (a 乘 60%) (a 乘 60%) (a 乘 40%)
/
(b 乘 30%) (b 乘 35%) (b 乘 70%) (b 乘 45%);

现在我们对这八个值的理解更深一步了，但是还有两种极端情况需要各位了解一下。
第一是，如果我们给出的属性值特别巨大呢？答案是浏览器只会渲染出这个图形能画出来的最极端的情况。比如一个宽高均为 100px 的矩形元素，加上 border-radius: 99999px 后，其实浏览器只会画出在几何数学上 2D 平面内能存在的最圆角状态 border-radius: 50px，也就是一个圆形或半圆圆角矩形。如代码清单 xx 和图 xx 所示。

<style>
.halfRound {
margin: 1em;
width: 200px;
height: 100px;
background-color: red;
border-radius: 999999px; 
/* 值也可以写成 calc(infinity * 1px)，意为无穷大 */
/* 注：calc() 是 CSS 中的“计算功能符”，后面会讲到 */
}
</style>
<div class="halfRound"></div>
<p>一个半圆圆角矩形（如果我宽高相等，我就是个圆形）</p>

第二是，在图 xx 的对圆角半径的示意上，我们很容易会想到当两个圆角半径“碰撞”到一起（或者说两个相邻边的圆角重叠）时的情况，那会怎么样呢？真是没巧不成话、无巧不成书，深入挖掘，我们会发现浏览器对该问题的处理方式十分幽默干脆！它会直接等比例缩小所有圆角半径，直到两个圆角半径碰不着儿，使其在几何形状上能“平滑过渡”地凑合着实现连贯（确实也没更完美的解决方案，另外这样确实能帮助在使用后面学到的 CSS 动画上实现平滑的视觉过渡效果，而不是到临界点突然戛然而止）。具体效果如代码清单 xx 和图 xx 所示。
（占位图片）
边框 border 的基本声明用法为 border: 1px solid black;，值是一个看起来头大的“多类型的值”和“关键字”复合的值。当然，这个其实是简写，这样写更方便，它的完整写法如代码清单 xx 所示。
.someClass {
border-width: 1px;       // 边框宽度
border-style: solid;    // 边框样式
border-color: black;    // 边框颜色
}

其实，若我们想快速声明一个边框，可直接写 border: solid;。当然，这个被浏览器解析后渲染的效果可不等同上面那个常用的“三值”声明，因为 border 的默认宽度为 3px，默认颜色为元素声明位置的字体颜色（换言之，若在该处字体颜色是“绿色”，那这里的边框颜色也默认为“绿色”）。
各位可能感到惊诧，为什么默认的宽度是 3px？这要从边框样式 border-style 说起。CSS 中的边框很有趣，足以窥探到互联网早起网页设计的丰富性，运行代码清单 xx 的内容尝试一下 border-style 各主要关键字的效果。

<style>
.borderDemo, .borderConfig {
margin: 1em;
padding: 0.5em;
max-width: 400px;
}
</style>
<div class="borderDemo" id="borderDemo">边框演示</div>
<div>
<label for="styleOption">边框样式 border-style：</label>
<select id="styleOption" onchange="changeBorderStyle()">
<option value="none" selected>-- 请选择 --</option>
<option value="solid">实线 solid</option>
<option value="dotted">点线 dotted</option>
<option value="dashed">虚线 dashed</option>
<option value="double">双线条 double</option>
<option value="groove">三维脊边 groove</option>
<option value="ridge">三维沟槽 ridge</option>
<option value="inset">三维内嵌 inset</option>
<option value="outset">三维突出 outset</option>
</select>
</div>
<script>
function changeBorderStyle(){  // 根据选择框的值，更改 borderDemo 的边框样式
borderDemo.style.borderStyle = styleOption.value;
}
</script>

结果如图 xx 所示。

（占位图片）

这个程序使用了前面 HTML 章节讲过的 <select> 选择框控件元素，现学现卖记得快！其中的 HTML 属性 onchange 和我们用过的 onclick 是兄弟，后者在鼠标单击后会触发，并执行其脚本，而 onchange 是浏览器检测到该输入控件元素的值被改变时才会触发，很适合用在这里。在 JavaScript 脚本代码中， borderDemo.style.borderStyle = styleOption.value; 可把 ID 为 borderDemo 的 CSS 属性 border-style 设置为我们选择框控件元素 styleOption 的当前的选定值。
那为什么线条的默认值为 3px 呢？我们可以看到“双线条”样式 double 的效果相比其他样式，更特殊一点：两条线以及一个空隙。可想而知，这三个元素若全是 1px，那至少得有 3px 的空间才可实现这个效果，因为在 CSS 中不存在如 0.5px 这类短于 1 个像素的长度概念，固 CSS 就此妥协，默认使用 3px 作为边框宽度。我们可在 <style> 里的 CSS 代码中为 borderDemo 元素添加一句 border-width: 1px; 然后再尝试一下，看看 double “双线条”效果是不是失效了。
除此之外， border-width 还有三个关键字值，只是我们几乎用不到，分别是 thin、 medium（默认值）、 thick，代表窄（1px）、中（3px）、宽（5px）。
和 margin、 padding一样， border-width 也支持分别调整每个边的宽度，我们可为 borderDemo 元素添加这样的样式声明： border-width: 0 5px 10px 15px;，然后刷新浏览器，会看到如图 xx 那样诡怪的图形。这四个值分别控制上、右、下、左（顺时针）。

（占位图片）

各位认为现在对“边框”的认识就大功毕成了吗？不！下面这个技术才是重点！这是一个经典的案例，前端程序员 CSS 几何作图的基本功 ---- 画箭头。
先来个浅显易懂的样式，运行代码清单 xx 的内容，如图 xx 所示。

<style>
.arrow {
width: 100px;
height: 100px;
border-style: solid;
border-width: 30px 40px 50px 90px;
border-color: black red blue green;
}
</style>
<div class="arrow"></div>

（占位图片）

我们可看到一个神奇的图形：四个大小不一的“梯形”围成一个洞口，大家可能会感慨， border 居然还能这样用！是的，得益于 border 在设计之初这个不经意设立的转角规则，多年来表现一直异常稳定，固我们在使用 CSS 制作一些图形时经常用到这个要点。现在，我们的例子是“梯形”，不过梯形可能不太实用，现在我们尝试把 arrow 元素的 width 和 height 两个 CSS 属性的值都改为 0，其效果如图 xx 所示。

（占位图片）

一个四个三角形组成的矩形拼图呈现在我们眼前，是不是很有趣？可能这个拼图我们用不到，但其中的三角形，却很实用。怎么将其取出来呢？我们会发现无论怎么调整四个边的宽度属性都不奏效，因为“转角规则”只有在不少于两个边存在的情况下才会起效。
我们步步为营，学习一个颜色相关的关键字： transparent（“透明”的英文名词）。我们现在把 border-color 的值改为 border-color: black transparent transparent transparent;，其效果如图 xx 所示。

（占位图片）

一个漂亮又自由的倒三角形出现了。无需引入图标等文件，而且效果稳定和渲染快，可用在“指示箭头”、“展开按钮”、“讨论区气泡箭头”、“绘图中的三角元素”等地方。
接下来是 box-shadow 阴影。这个 CSS 属性能让元素变得立体，让页面更精致，同时也是一个极具潜力的设计工具属性：因为它可以在 HTML 中声明无数个可定义位置、颜色等属性的图形。
它的语法相比上面的 border 和 border-radius 之繁琐程度有过之而无不及。我们现在使用一个圆图形来讲述关于 box-shadow 的语法。运行代码清单 xx 中的内容，运行结果如图 xx 所示。

<style>
.shadowDemo {
margin: 3em;
width: 150px;
height: 150px;
border: 1px solid var(--fireBorder);
border-radius: 50%;
box-shadow: 10px 10px 10px 10px grey ;
}
</style>
<div class="shadowDemo"></div>

（占位图片）

这个效果好像一个圆纸片悬浮在屏幕上面。这个圆纸片的阴影是一个向右偏移 10px，向下偏移 10px 的模糊半径为 10px 且阴影大小向外扩展 10px（在本例中，该圆的阴影半径比圆大 10px）的 灰色阴影，这也是在这个属性值中按从左到右的顺序分别对每个 10px 的解释。如图 xx 所示。偏移就是移动，这个毋庸赘述。模糊半径则是模糊程度，我们可将其模糊程度由 10px 改为 0 试试，刷新浏览器，可看到灰色阴影变成了灰色月亮，也就是没有模糊效果的阴影。

（占位图片）

这是一种最基本的语法，如果前面再加上关键字 inset，则可以实现内部阴影的效果，比如代码清单 xx 和图 xx。

box-shadow: inset 10px -10px 10px grey ;

（占位图片）

一个好像素描美术课上写实的小球出现了。
box-shadow 更实用的功能是，它可以让我们生成无数个“阴影”！不像 border 边框，我们声明一个后再次声明会效果被覆盖。现在，我们利用这个强大的“多阴影系统”编写一个清莹秀澈的红色水晶球吧！如代码清单 xx 和图 xx 所示。

box-shadow: 
0 0 20px #ffdede,
0 -20px 60px #f9ff00,
0 20px 60px #f00000,
inset 0 0 50px #f2ff74,
inset 200px 0 80px #ff5757

（占位图片）

我们为一个普普通通的圆形 div 添加了五个阴影，有圆形内部的，有圆形外部的，然后就神奇地形成了个有立体感的球！这个球也很像一个刚出炉的热滚滚、红喷喷的铁球，现在我们对这个属性的掌握应该也差不多炉火纯青了。
（10）锦上添花的伪元素
回到我们的《放假公告》，我们再为这个看起来已足够工致的页面添上一笔，毕竟现在这个效果看起来还是有点“大众脸”。当然另一方面，也为了介绍 CSS 中的“拳头语法” --- 伪元素。本小节追加的代码如代码清单 xx 所示。

<style>
/* 锦上添花的伪元素 */
.card-title {
margin-left: -26px;
text-indent: 26px;
position: relative;
}
.card-title:before {
content: "\20";
width: 17px;
height: 110px;
background-color: #f55d3f;
position: absolute;
left: -17px;
border-radius: 14px 0 0 14px;
}
.card-title:after {
content: "\20";
width: 11px;
height: 14px;
background-color: #a03d29;
position: absolute;
left: -11px;
top: 90px;
border-radius: 9px 0 0 9px;
}
</style>

（占位图片）

这便是我们 CSS 入门案例的最终效果了，看起来既有点“高级感”又不至于太无趣。仔细观察代码，在代码清单 xx 中的第一个 CSS 规则集里，第一行代码中的 - 负号，大概会让我们对 CSS 中 margin 属性的认识耳目一新，因为我们前面刚讲过 margin 是物体的外边距，但这里的外边距怎么还出现了负值？看起来如此反认知！
CSS 规则集是指 选择器 + 声明块 组成的一组完整的 CSS 代码，如 .demo {color: red} 就是一个 CSS 规则集。
这是一个新知识点 ---- 负值 margin ，它和 !important 都是 CSS 中的“魔鬼工具”，使用不当会给 CSS 编码工作添麻烦、惹是非，但不要忘了它们的力量也同样是强大的，能解决很多疑难的问题，就像本节的示例，负值 margin 就解决了一个难题。
什么难题呢？
在之前讲 HTML 元素的例子中我们知道“伪元素”大概是什么：“简单说，它可帮我们在不改动 HTML 代码的情况下，对我们目标元素的特定部分进行样式修改，比如第一行、某个字符、元素前面、元素后面”，就像我们本例中，想给横幅加个三维的曲卷效果，需要画两个小图形，总不能动 HTML 代码、再额外加两个 <div> 吧。所以我们就使用伪元素中的“元素前面”和“元素后面”，将小图形和横幅牢牢绑定在一起！
但这又戳到 CSS 中伪元素的痛点了，添加前后“虚拟元素”的伪元素确实很强大，可只能添加两个，即 ::before 和 ::after，而在本例中，这两个伪元素实现的效果并不完美：我们可将第一个规则集里的那两行代码删去，看一下仅仅使用两个伪元素的渲染效果，如图 xx 所示。

（占位图片 xx：两个伪元素似乎不够......）

我们发现，横幅和我们的两个图形连不上。如果 CSS 能再添加一个类似的伪元素，这个问题会得到解决。可是 CSS 既不支持，我们又不想改变 HTML 结构，那我们只好在 CSS 上动脑筋了。
我们需要先让“横幅”向左伸出一部分。此时使用 width 肯定是没用的，因为有一个很重要的因素：我们并不知道横幅的宽度！写 CSS 确实需要有一定的“艺术创造”思维，感性面对我们的每个元素，但写 CSS 和电子绘图绘画在很多地方又是截然不同的。现在我们并不知道这个“横幅”的宽度，毕竟也不能定义它的宽度，否则在移动设备或其他屏幕尺寸上我们的结果会出现画面缺陷（这是个自适应页面，在不同尺寸的屏幕上需要都能正常显示）。
所以我们要让它横幅“主动”向左延伸。通过思考，我们发现负值 margin 最合适。
好，先停一下，如何理解这个神奇的负值 margin 呢？
负值 margin 如果从现象上理解，则很难总结一个很通用的规律，因为是否定义了 width、是行内元素还是块级元素、各 margin 的状态等，都会影响它的显示效果，但如果直击本质的话，就略微简单点了。（虽然还是有点复杂，但相较于对不同情况下对“现象”的总结归纳，还是容易很多）
首先我们不要忘了什么是 margin？它是“外边距”，是一个距离！比如 margin-left 就是某元素的左边界和其父元素左边界或同级元素右边界的距离，一维空间里距离是可以有正负的，这是客观存在的，无论是否定义，距离是肯定有的。
接下来是 CSS 关于盒模型的一个原则。在盒模型中，有 width、border、width、height、padding、margin，其中 CSS 只允许 margin 使用负值，而 CSS 还有一个原则：CSS 需要保证某元素在水平（垂直）方向上的这些属性的和，等于其父元素的 width（height），如果某值没定义，则电脑系统为其自动赋予使该原则成立的值。如代码清单和图 xx 所示。

<style>
.me-father {
border:  4px solid black;
width: 500px;
padding: 50px;
background-color: green;
}
.me {
width: 300px;
border: 6px solid black;
padding: 10px;
background-color: white;
}
</style>
<p>当前“我”的父元素的 width 为 500px，padding 为 50px，border 宽度为 4px。</p>
<p>（父元素的实际显示宽度为 500px + 2*(50px + 4px) = 608px）</p>
<div class="me-father">
<div class="me">我的宽度为 300px，border 宽度为 6px，padding 为 10px。</div>
</div>
<p>此时“我”的显示效果:  </p>
<pre>
“我”的 margin-left 为 0px
“我”的 margin-right 为 168px (这个是指的实际距离，而不是定义在属性上的值)
“我”的 width 为 300px
“我”的 border 为 6px
“我”的 padding 为 10px
0 + 6px + 10px + 300px + 10px + 6px + 168px = 500px （这些值加起来等于“父元素”的 width）
</pre>

（图，另外做上一些必备的标注）

如果，此时我们为“我”元素再添加一个 margin-left: -100px;，结果如图 xx 所示，“我”元素居然会向左移动！不过，我们的 CSS 盒模型原则依然成立，计算式如代码清单 xx 所示。

-100px + 6px + 10px + 300px + 10px + 6px + 268px = 500px
（“我”的 margin-right 变成了 268px，与负值左边距抵消掉了）

此时，我们再将 width 删去，结果如图 xx 所示。
（图）
width 会填充空余的空间。现在 CSS 盒模型原则依然成立，计算式如代码清单 xx 所示。

-100px + 6px + 10px + 568px + 10px + 6px + 0px = 500px
（“我”的 width 变成了 568px，右边距归 0）

这两个例子可以很好表达出负值 margin 的原理，根据这个 CSS 盒模型原则就可以推断出负值 margin 的显示效果，当然应注意，由于我们的阅读习惯是从左到右，从上到下，所以 margin 在左边和上边定义负值时显示效果会更优先，如果有时发现“右”和“下”两个方向上的负值 margin 失效了，不要惊讶，这大概是浏览器找不到能抵消使用的“合适人选”属性了。
至于为什么允许负值 margin 存在？笔者认为这很可能最初是为解决一些文字中插入内容与文字高度不一致的显示难题而来的解决方案。网页中有时有一些在文字中间的小图片等内容，倘若两者高度不一致，此时想让某元素向上或向下微调以让显示效果美观时，负值 margin 就很实用了，也符合这个“距离”语义。如代码清单和图 xx 所示。毕竟内边距 padding 有负值就会很奇怪。

<style>
.round {
display: inline-block; 
/* 上面这行代码可让文字里的 span 元素可定义宽高，稍后会讲到 */
width: 50px;height: 50px;
background-color: red;
border-radius: 50%;
/* 使用负值 margin，微调圆的位置 */
margin-bottom: -17px;
}
</style>
<p>
这是一个圆 <span class="round"></span> ，使用负值 margin 可以让圆和文字对齐。
</p>

当然，实际应用中负值 margin 也大有可为，尤其在布局上，在后面章节中我们会再次讲到。
通过上面对负值 margin 的讲述，我们可轻松在《放假公告》例子上解决横幅左边延伸长度的问题。但我们延伸后，发现文字也偏移了，如图 xx 所示，此时使用我们前面学过的 text-indent 文字缩进来抵消到这个移动，这个比较简单，笔者不多说了。
接下里是伪元素，常用的伪元素有 4 个（首字母、首行、之前、之后，当然除此之外还有好多......），本节要讲的是最常用的两个（之前、之后）：我们要在某元素旁边添加一个“虚拟元素”，而“旁边”有两层含义，“之前”和“之前”，也就是 ::before和 ::after。（很神奇的是，这两种“虚拟元素”在网页中无法被鼠标选中，而且也无法被 JS 代码操纵，只能读取，有点强制性被“样式与内容、动作分离”的设计原则绑定的感觉。）
这里的双冒号 :: 写成单冒号 : 也可以正常运行，但在 CSS 规范里的推荐写法是：“伪元素”写成双冒号 ::，“伪类”写成单冒号 :，以便于区分，提高代码可读性。至于“伪类”是什么，我们后面会说。
最开始，CSS 的设计人员并没有为这两种伪元素考虑太多，仅为了方便添加一些文字阅读体验上的点缀，如代码清单 xx 和图 xx 所示。

<style>
.warn-info::before {
content: " <!> ";
color: red;
font-size: 2em;
}
</style>
<div class="warn-info">系统异常，可能是文件遭到损坏</div>

其中的 content 属性的值是我们要添加的文字，当然也可以添加图片，比如 content: url(warnning.gif);。当然，请注意！如果使用 ::before 和 ::after 伪元素，必须提供 content 这个属性！这点很重要 ，否则这两种伪元素不会生效。（另外， content 属性值中不建议写入中文，因为根据实践经验，乱码几率很大）
不过后来，程序员不满足这个简单点缀，发现它可以实现更多的效果，不仅仅是添加字符，还可以变相让它变成一个小图形。此时因为这两种伪元素必须要有 content 属性和属性值，如果这个属性值留空，则该伪元素失效，所以我们需要添加一个占位符，比如：“直接空着什么都不写”、“一个空格字符”、“一个空格字符的 Unicode 转义序列”（强迫症患者专用）。对应的代码如 content: ""; 或 content: " "; 或 content: "\20"; 。
实践才能对这两种伪元素的理解更深一步！现在我们利用 ::before 和我们上一小节学到的“ border 画三角形技术”结合起来，来画一个“小文字气泡”。如代码清单 xx 和图 xx 所示。

<style>
.warn-info {
position: relative;
width: 200px;
height: 45px;
padding: 10px;
background-color: orange;
border-radius: 5px;
}
.warn-info::before {
/* 初始化元素显示方式和定位方式 */
content: "\20";
display: block;
position: absolute;
/* 调整位置 */
top: 65px;
left: 10px;
/* 使用 border 画气泡 */
width: 0;
height: 0; /* width 和 height 不写也可以，因为它们默认为 0 */
border-style: solid;
border-width: 15px;
border-color: orange transparent transparent transparent;
}
</style>
<div class="warn-info">系统异常，可能是文件遭到损坏</div>

（占位图）
这个例子能很完美表达出 ::before 和 ::after 的现代主流使用技术的基本思想。不过现在，我们又要多学两个新属性了， display 和 position。这两种伪元素倒是没太多内容要讲述，大概就那么回事儿，“三角生成技术”我们上节也说过。但这个“三角小箭头”是怎么跑到下面的？这个值得探讨！
display 是开启后续会学到的很多 CSS 高级功能的钥匙，它有很多属性值，不过在这个阶段，我们需要了解它的四个属性值。分别是： none、 block、 inline、 inline-block，其中文含义是“隐藏”、“块级元素显示”、“行内元素显示”、“行内-块级元素显示”。
第一个 display: none; 实在太简单了，就是“不显示”的意思，使用这个属性值的元素，会直接消失不见了。如代码清单和图所示。

<p>
在这行文字中，<span style="display: none;">我不会被显示出来</span>我可以被显示出来。
</p>

（占位图片）

之后的三个属性值比较有意思，我们在很久之前了解过过“块级元素”和“行内元素”，当时说的很笼统，我们大概能了解“块级”、“行内”的字面概念：一个独占一行、一个能塞在行内。但今天天上突然掉下个“猪八戒” inline-block，名曰“行内-块级元素”，如何理解这个奇怪名字？“行内”和“块级”难道不是一种类似“上”和“下”这样对立的概念吗？
不要忘记，行内元素，它也叫“内联元素”，在其他参考文章中，有时会被它们的作者习惯称为“内联元素”，注意辨认。
先解决一个“先有鸡，还是先有蛋”的问题，其实在没有 CSS 参与的情况下，这些“xx元素”可将我们最开始学过的那些 HTML 标签元素分类：因为这是早期在 HTML 规范下产生的概念，如代码清单 xx。我们仔细回忆它们的显示细节，稍作琢磨，通过我们在学习 HTML 时的经验，大概可以领悟到它们之间的区别。

1. 块级元素（block element）如：
<div> <p> <h1> <h2> ... <h6> 
<form> <li> <table> <pre> <hr> 等。

2. 行内元素（inline element）如：
<span> <a> <em> <i> <b>  <strong>
<sub> <sup> <cite> <code> <label> 等。

3. 行内-块级元素（inline-block element）如：
<img> <textarea> <button> <input> <iframe> 等。

它们本就是一些元素的默认显示类型，只不过后来 CSS 将其归纳总结成了一个完善的模型，并让其可根据需要来灵活更改（当然，这种可灵活更改性是有限的）。现在有了 CSS，这种表现特性不再被固定死，我们通过 CSS 中的 display 就可以更改大部分 HTML 标签的部分元素显示类别。
“行内块级元素”，吸纳了“块级元素”和“行内元素”的部分特点。它们之间的区别如表 XX 所示。

类型	排列方式	width 和 height	默认 width	其他注意事项
块级元素	独占一行，多个相临的块级元素会垂直并列显示	可以自定义	100%（即父元素的 width）	无
行内元素	不会独占一行，多个相临的行内元素会在一行内显示	不能自定义，不过可以定义行高 line-height	元素内容（比如文字）占据的宽度（当然实际上根据 CSS 文字处理模型，这方面内容更复杂一点）	“行内元素”里不能容纳“块级元素”
行内块级元素	和“行内元素”一样，不会独占一行	和“块级元素”一样，可以自定义	和“行内元素”一样，元素内容占据的宽度	无

就像我们刚才演示负值 margin 在文字中的作用时定义的那个红色的圆，它既需要在行内显示，又需要有自己的宽度，那么就将它的 display 属性值设置为 inline-block。
在伪元素里，也是如此。应注意， ::before 和 ::after 两种伪元素根据其概念，可推断出它们的默认 display 属性值为 inline，所以如果我们想使用它们制作一些有自己宽高的小图案，那务必将 display 设置为 inline-block。
当“小图形”元素定义好了，就需要定位了。
按照其他 CSS 教程，在 CSS 的学习初期提到定位，第一个想起的应该是 float 浮动，不过根据笔者的经验，在真实项目中我们很少用到它，相反，我们会更愿意使用 display + position 的方式，原因如下：首先理解这个“浮动”概念就很困难，其次“浮动”的“陷阱”很多，很难预测它的显示效果，动静也大，一不小心整个页面就会错乱。虽然它在某场景下确实有不可替代性，但除此场景之外，其他方面笔者并不推荐使用。
在 CSS 入门阶段，我们只需先了解一下 position。至于 float，我们会在之后的章节学习。
position 可以定义元素的定位类型。它有五种定位方面的属性值，对应五种定位类型。如表 xx 所示。


属性值	定位类型名称	含义	定位基点（也是它们的主要区分点）	应用场景
static	默认定位	按照程序正常生成	无	没有定位需求时使用（这是默认值，所以基本不会用到）
absolute	绝对定位	脱离文档流，按照定位基点（祖先元素或 HTML 根元素）进行定位。当父元素被定位过时使用父元素，如果父元素没被定位过，则向上一级级寻找定位过的祖先元素，如果都没有则使用 HTML 根元素。“被定为过”是指 position ，而不是 static		非 position: static; 的某个祖先元素	最常用的定位类型，可以使元素在页面中随心所欲地定位
relative	相对定位	保留在文档流中的形状和空间，以元素自身默认位置为定位基点进行偏移	自身默认位置	较少单独使用，一般是为了让子元素或后代元素使用 absolute 以自己为基准点定位做准备（因为 absolute 的父元素或祖先元素只有被定位过，才会成为基准点）。单独使用一般用于元素的位置微调。
fixed	固定定位	脱离文档流，按照浏览器窗口（也可理解为“屏幕”）为基点进行定位	浏览器窗口	一些悬浮在浏览器窗口上的小组件，比如“客服聊天器” 、页面右下角的“返回顶上”按钮
sticky	粘性定位	根据用户对网页的“滚动位置”进行动态定位，不同的位置可使定位基点以元素自身默认位置和浏览器窗口两者之间进行动态切换	自身默认位置、浏览器窗口，两者动态切换	始终在浏览器窗口里置顶的网页菜单栏、网站搜索工具栏


上述表xx中的“文档流”（document flow）是一种抽象的概念，通俗来说，是指页面元素按照在 HTML 代码文档中的先后顺序在页面中依照盒模型和块级元素、行内元素、行内块级元素的排布规律从左到右、从上到下进行排列。脱离文档流则意味着这个元素从本应该所处的位置脱离，独立占据一个维度显示，不影响其他元素的位置和显示效果，也不占据空间，好像没有这个元素一样。
上面这个表格写的比较复杂，不过我们可以按照使用场景一步步理解：
场景一、如果我们想让一个元素放到其他位置，比如前面“气泡框”的“三角小箭头”底边放到方框的下边缘处，那么就做三件事：
1、向“气泡框” .warn-info{} 里添加 position: relative 样式。
2、向“气泡框”的“小三角箭头” .warn-info::before{} 里添加 position: absolute 样式。
3、使用 top、 buttom、 left、 right ，也就是“上”、“下”、“左”、“右”四个 CSS 属性调整“小三角箭头”的位置。（比如向上偏移 10px，就设置 top: 10px;）
一定要牢牢记住！这是 position 最常见的用法 ----- 父元素使用 relative，子元素使用 absolute，然后使用上、下、左、右进行偏移。仔细琢磨，我们应该明白“三角小箭头”是怎么跑到下面的。像这个案例中的 relative 和 absolute 组合模式，在 CSS 编码中会被很频繁地使用！我们《放假公告》案例同样也使用了这个组合模式。
场景二、如果我们想在一个网页页面中添加一个场景的“返回顶上”小组件，让它始终处于网页右下角的位置，那么我们可以使用 fixed 固定定位方式。如代码清单 xx 和图 xx 所示。

<style>
.demo-content {
width: 100%;
height: 50vh; /* 辅助生成一个比较长的页面 */
}
.bgcolor-orange {background-color: orange;}
.bgcolor-yellow {background-color: yellow;}
.to-top-btn {
/* 使用固定定位，将按钮“固定”到浏览器右下角区域 */
position: fixed;
right: 4em;
bottom: 4em;
/* 按钮样式 */
height: 50px;
width: 50px;
border-radius: 50%;
}
</style>
<div class="demo-content bgcolor-orange"></div>
<div class="demo-content bgcolor-yellow"></div>
<div class="demo-content bgcolor-orange"></div>
<div class="demo-content bgcolor-yellow"></div>
<button class="to-top-btn" id="toTop">TOP</button>
<script>
toTop.onclick = function(){  /* 单击 Top 按钮后触发“使页面返回顶上”的事件 */
window.scrollTo({  /* 这个函数可以让屏幕平滑（smooth）滚动到顶部 */
top: 0,
behavior: "smooth"
});
}
</script>

（图片占位）

滚动这个页面，我们会发现右下角的 TOP 按钮始终处于屏幕的右下角，不受我们滚动的影响。这便是 position: fixed 的固定作用。
场景三、我们在浏览一些购物网站、新闻网站等内容网站时，有时会发现它们顶部的菜单栏、导航栏、工具栏本来在网页中间，一滚动就固定到了顶部，这种方便我们浏览网页的创意视觉效果，以前只能通过 JavaScript 脚本实现的，后来一直到 2017 年 CSS 推出了 position: sticky; 的粘性定位方式，这种效果的实现变得更容易了，如代码清单 xx 和图 xx 所示。

<style>
.demo-content {
width: 100%;
height: 50vh; /* 辅助生成一个比较长的页面 */
}
.bgcolor-orange {background-color: orange;}
.bgcolor-yellow {background-color: yellow;}
.demo-nav {
/* 使用粘性定位 */
position: sticky;
top: 0;  /* 这是一个”切换“阈值，当元素距离顶部 0px 时，切换定位方式 */
/* 导航的样式 */
padding: 2em;
text-align: center;
background-color: white;
}
</style>
<div class="demo-content bgcolor-orange"></div>
<div class="demo-nav">
|<a href="#"> 首页 </a>
|<a href="#"> 热点 </a>
|<a href="#"> 论坛 </a>
|<a href="#"> 博客 </a>
|<a href="#"> 关于 </a>|
</div>
<div class="demo-content bgcolor-yellow"></div>
<div class="demo-content bgcolor-orange"></div>
<div class="demo-content bgcolor-yellow"></div>

（图片占位）
我们滚动页面，会发现导航会在“呆在原始位置”和“固定到页面顶部”两种效果间切换，始终在我们眼前，特别有趣。当然，这个定位方式必须有一个阈值（比如 top: 0;）才会生效。
场景四、 position: relative; 通常用于和 absolute 组合实现元素的定位。由于它在偏移后还会保留元素原来占据的空间，它的使用场景因此大大受限，这个特性使其味如嚼蜡，不过依然可用于微调元素：像我们之前学习过的负值 margin 中红色圆球的位置微调，使用 relative 同样可以完成，如代码清单 xx 和图 xx。

<style>
.round {
display: inline-block; /* 这行代码可让文字里的 span 元素可定义宽高 */
width: 50px;height: 50px;
background-color: red;
border-radius: 50%;
/* 使用相对定位，微调圆的位置 */
position: relative;
top: 17px;
}
</style>
<p>
这是一个圆 <span class="round"></span> ，使用 relative 相对定位方式，也可以让圆和文字对齐。
</p>

（占位图片）
还有个比较小众的知识点，特别适合在本小节中讲述：本小节我们既学了可以微调元素位置的负值 margin，又学了能将元素脱离文档流的 position: absolute;，而经过 position: absolute; 洗礼的元素，会自动拥有 display: block; 的属性（变成了块级元素，可以自定义自己的宽、高），很适合负值 margin 来直接微调它的位置。其实，这个时候，我们可以将负值 margin 原理和 position: absolute; 两者结合，这样我们能实现在不依赖祖先元素的情况下，使元素在页面中随心所欲地“纵横”！比如 .demo{position: absolute; margin-left: -10px;}，如果能理解这个用法且感兴趣的小伙伴可以尝试一下。
通过学习上面的大案例以及很多附带的小案例，我们已经具有使用 CSS 去装饰一些简单网页的能力了，对 CSS 也没有在前面章节学习时的陌生感了，至此，我们已完成 CSS 入门部分的全部内容，这也为后面对 CSS 的进阶学习奠定了基础，犹如画一颗大树，我们现在把主干和几根明显的小树叉画了出来，接下来就是增加更多根的树叉和繁茂的树叶了。
第三章 前端三剑客的强将： JavaScript 的简单入门
在 CSS 入门的内容里，我们的大脑短时间内被塞进了很多信息，现在我们先停下来，让大脑自己沉淀一阵子，看看新风景，学点不一样的新东西 ----- 强大的 JavaScript！
JavaScript 的深入学习之路很漫长，和学习数学一样路途一眼望去，无涯无际，即使实践多年,笔者对 JavaScript 的掌握也仍是初来乍到...... 不过入门 JavaScript 依然和入门数学一样，很简单且很有趣！本章内容很少，但足以让各位掌握 JavaScript 的核心要点、领略到 JavaScript 的魅力。我们慢慢前进，日拱一卒，功不唐捐！
3.1 学习 JavaScript 的重要性
对于前端工程师，JavaScript 是其贯穿整个职业生涯的“患难之友”，就像加工机床之于机械加工师傅、木工工具之于木工师傅，在很长时间里两者相互陪伴，度过一个又一个难题，创造一件又一件产品。孤独、愤怒、惊恐、狂喜、疲倦...... 两者相互塑造彼此的容貌和灵魂。
相比而言，CSS 就没那么重要，CSS 确实没有 JavaScript 重要。前端的核心就是 JavaScript，这点毋庸置疑！
在编码上两者思想也不一样，写 CSS 要有一种全局上对形形色色个体包容和了解的“领袖”思想，就像下围棋一样，不能单纯扣细节，JavaScript 则需要步步稳妥的数学思想：如何设计算法解决问题，搞清楚数据是怎么流动的，要节约资源、修补隐患、方便维护，犹如机械时代的机器设计师，为客户解决问题、设计良好的内部构造。
可能会超乎我们的想象：JavaScript 目前已经是使用人数最多的编程语言，也是目前使用领域最广泛的编程语言！除了被浏览器使用，还可以应被用在服务器应用、游戏脚本、桌面软件、区块链、物联网、深度学习、硬件编程等领域的开发中，总之，能用 JavaScript 写的最终就会被用 JavaScript 写，势如破竹、风生水起 ..... 一门解释型脚本语言在短短十年内几乎称霸了整个互联网和计算机界，着实令人惊叹！
虽然编写 CSS 和 JavaScript 都属于编程，但显然编写 JavaScript 才属于“传统编程”。而且，即便我们从没有接触过传统编程，如 C/C++、Java、Rust、Python、PHP 等，对 JavaScript 的学习也没有影响。并且学习 JavaScript 也能让我们以极低的门槛感受到编程的神奇之处 ----- 编程结果和数学一样不会骗我们，计算机也拥有着巨大的计算力量，我们可能在过去知道计算机每秒能计算很多次，但只有掌握编程，我们才能感受到驾驭这种力量的乐趣 ----- 而不是被计算机驾驭（充当短视频平台的人头、被游戏玩、为隐私的泄露添火加柴......），我们可能都忘了，今天我们见到的每颗普通的芯片都是古代举全球之力也无法赛过的算术妖怪。
话说回来，不同的编程语言都有各自的优势，JavaScript 确实无法替代别的很多主流语言，但因为它的圈子实在太大，发展得也很快，入门也简单，业界技术沉淀也足够深，入门门槛也低，相比其他语言能以低成本方式展示图形化结果（能直接操纵 HTML 和 CSS），固送给我们的乐趣也会很多，所以绝对值得我们花费很久去钻研，起码当下在前端领域是如此，也绕不过（毕竟 JavaScript 目前是网页编程的唯一语言）。
当然，JavaScript 的语法，借鉴了很多著名的高级程序语言，如 Java、C，如果有这些语言基础的伙伴，在学习 JavaScript 会非常容易，因为 JavaScript 的语法相比它们，更简单，更自由。
3.2 在 HTML 中引入 JavaScript 脚本代码
在前面的章节，我们在示例中使用过几次 JavaScript，算是对它比较熟悉了。现在我们重新开始认识它。
在之前我们已经见过了在 HTML 中引入 JavaScript 的方式，一共有三种，我们来温习一下，总结一下如下所示：
1、文件引入法：在 <head> 标签或 <body> 标签靠近末尾的地方写类似 <script src="myScript.js"></script> 的代码，将以 .js 为结尾的 JavaScript 脚本文件引入到我们的网页中。
2、内部脚本块：在 <head> 标签（不推荐）或 <body> 标签靠近末尾的地方添加 <script></script> 标签，并在其中写 JavaScript 脚本代码。
3、通过事件语柄嵌入（更不推荐）：我们可以在 HTML 标签中的属性里添加一些事件属性，比如 <button onclick="myFunction()">点击我</button>。
但我们在实际生产环境中，最常用的方式是使用第一个“文件引入法”，因为这样会让样式与功能两种工序相分离，每次修改无需动 HTML 代码，另外也因为绝大部分 HTML 文件很小，占用不了多大空间，而 JavaScript 脚本文件往往较大，甚至能达到几 MB 大小，浏览器加载完 JavaScript 会将其缓存下来，等我们再次刷新时就不用再下载一遍 JavaScript 脚本文件了，可以节省流量。（CSS 也是同样的道理，JavaScript 脚本和 CSS 样式两者最好都与 HTML 分离，分别单独成一个或一组文件）
至于为什么不推荐在 <head> 标签中引入呢？我们可以做一个小实验，拿我们比较熟悉的 alert() 函数来演示，如代码清单 xx 所示。

<!DOCTYPE html>
<html lang="zh">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Document</title>
<script>
alert('现在页面背景是白色的，单击“确认”后页面背景才会变黑。');
</script>
<style>
body {
background-color: black;
}
</style>
</head>
<body> ...... </body>

运行后，会有一个页面弹窗，此时页面背景是白色的，点击后页面才会变成我们 CSS 中定义的黑色，因为 JavaScript 脚本会阻塞 HTML 文档代码的解析，当解析器遇到 JavaScript 代码时会立即执行。根据这个现象我们可以推导出：如果我们把脚本写在 head 或 <body> 的靠前位置，那么在脚本后的元素是无法侦测到的，这往往会导致我们引入的代码功能失效。（如果非要写在 HTML 的头部，我们可以使用 defer 属性，如代码清单 xx）

<script src="myScript.js" defer></script>
<!-- 添加 defer 后，无论上面这行代码写在 HTML 文档代
码的哪个地方，都只会在整个文档加载完成后再执行 -->

解释型和编译型语言......

不过由于多个文件的内容在书中的呈现不会很方便，所以在此后的章节，我们会使用第二种方式 “内部脚本块”来展示我们学习 JavaScript 的案例代码。
至于第三种办法 ---- 在 HTML 中“通过事件语柄嵌入”JavaScript 代码，笔者更是不推荐，原因很简单，在早期人们意识不到样式、行为与 HTML 分离的重要性时，曾大量使用这种方式，让 HTML 属性内部挤满了 style 和 onclick 等属性，这样会使 HTML 逐渐变成一个无法阅读和维护的名叫“标签汤”的复杂代码垃圾场，显而易见，这种方法是一个“陷阱”！所以，从今天以后，我们就不要使用第三种方式来写我们的 JavaScript 脚本了。
通过上面的 alert() 演示 JavaScript 阻塞 HTML 的例子，我们发现浏览器会自上而下解析 HTML 文档，当解析到 JavaScript 脚本代码时便会立即执行，那是不是我们写代码时就应该像写一个 <div> 标签一样自由地在 HTML 代码中写呢？这样写确实可以执行，但这个习惯很不好，因为会让我们很难找到阅读代码的入口。笔者更大家推荐使用 window.onload = function(){...}; 开始我们的代码，如代码清单 xx 所示。

<body>
<div>这是网页的正文！</div>
<script>
window.onload = function(){  // 我们从这里开始编写 JavaScript 脚本代码
alert('Hello! Welcome to JavaScript\'s World!');
};
</script>
</body>

上面程序中的 window.onload = function(){...} 是浏览器为我们提供的一个方法，它后面能定义一个函数，如 window.onload = alert('Hello!')，这个函数会在浏览器将 HTML 加载完毕后触发，多次定义将会被覆盖，如代码清单 xx 所示。我们只预留一个入口来“进入”代码，这样将大大增加我们代码编写工作逻辑的条理性。

window.onload = function(){
alert('我是一号');
};
window.onload = function(){
alert('我是二号');
};
// 大家可以试试看，“我是一号”弹窗是不会出现的

不过由于我们的页面很可能有多个独立的 JavaScript 程序，比如代码里有一段特效、一段点击事件，那么我们的 window.onload 可以如代码清单 xx 那样写。将多个函数按照我们设定的顺序放到 window.onload 中，之后再在各自的函数里详细编写我们相应的程序内容。

window.onload = function(){
effect();
buttonOnClick();
};
// 注意，上面effect()、buttonOnClick()是假想的两个函数
3.3 认识 JavaScript 的语法
3.3.1 语句
每个难以理解的事物，都由一个个简单的单元构成，就像细胞对于身体、钢筋水泥砖块对于建筑，我们对各种眼花缭乱的游戏、复杂的网页效果感到迷茫，细细剖析，其实是编程语言中的一个个程序语句构成的。
程序语句就是一条条指挥计算机运行的指令， alert('hello!'); 就是一句指令， JavaScript 中的语句形式已经是经过百年的程序语言发展优化后，造就的已经很容易使人理解的形式了，在计算机最早期，人们都是使用 16 进制甚至 1 和 0 来写程序，后来被科学家抽象设计化成的汇编语言如今看来也是难以阅读，而现在的 JavaScript 语句相对来讲简单多了。
实际上，这些语句还并不是计算机能直接读懂的，相反，这其实是为人类去阅读而优化设计的，浏览器有解释器，会将这些 JavaScript 语句按顺序挨个字符进行分析，最后“翻译”成计算机能阅读的二进制后才会被真正运行。（现在的人工智能对人类口语语义的理解程度已经很厉害，未来的程序语句或许还会更接近人们的口语表达）
JavaScript 语句的格式很自由，可直接理解“语句”就是指一条独立的指令。当然，JavaScript 的解释器非常智能，甚至能够检测到什么时候断句。如代码清单 xx 所示。

alert
('hello')
;
// 这个弹窗依然可以被执行！

在上面的代码清单中，我们会发现后面有个半角分号 ;。半角分号可以强制性分割 JavaScript 语句，如果不存在，JavaScript 解释器就会在无法正常解析的情况下智能填补分号。虽然很多人说不加分号会使代码看起来很清爽，但笔者还是建议大家写上分号，因为“智能填补分号”很容易使代码运行结果步入不合我们原意的歧途，导致意想不到的错误。另外，写上半角分号，也会约束我们，使我们养成谨慎编码的好习惯。
3.3.2 注释
和 CSS 中的 /* ... */ 一样，JavaScript 中也有注释，不过 JavaScript 中的注释更容易敲打出来，是两个斜杠。JavaScript 支持三种注释风格，如代码清单 xx 所示。

// 我是“行注释”，只在单行内有效，双斜杠后的内容会被解释器忽略
// 上面几个代码清单的例子就用到了我
/*
我是“块注释”，
可以写很多行注释。
在插入大量文本注释时我会很有用。
*/
<!-- 我是一种古老的“行注释”，不推荐使用

前两种比较好理解，第三种很少见到，这个其实是早期兼容不支持解析 JavaScript 浏览器的一种奇怪的妥协方案，我们在阅读一些古老代码时应注意。如代码清单 xx 所示，这是一段模拟早期 JavaScript 在 HTML 中样子在例子。

<script type="text/javascript">
<!--
window.onload = function(){
alert('你好啊，我是一个 JavaScript 弹窗脚本！');
};
//-->
</script>

JavaScript 是后于浏览器出现的，所以存在兼容问题，那些不认识 JavaScript 脚本的浏览器会按照类似解析 <div> 的方式，哭笑不得地将里面的代码也显示到屏幕上，因此当时的 JavaScript 开发人员就保留了这个注释，使得代码在不被浏览器理解的情况下，起码也不输出到屏幕上。
除此之外，一些老代码中还存在如代码清单 xx 的条件注释。

<!--[if IE]>
<style>
.someClass::after {
content: "this is IE explorer!";
}
</style>
<script>
alert('你在使用 IE 浏览器！');
</script>
<![endif]-->

这是 HTML 中的语法，因为过去，浏览器种类有很多，它们支持的语法也互不相同，为了方便兼容不同浏览器，产生了这样的条件注释，为不同的浏览器定制不同的代码，互不干扰，如 <!--[if IE]>...<![endif]--> 里的内容只有微软的 IE 浏览器可以解析。
在单独的 JavaScript 文件（如 demo.js）中，我们也可以在文件的最顶部写上一些对本文件的描述，称为文件注释，方便其他开发人员阅读、排查问题与责任，一些代码编辑器也可能会识别解析，至于格式怎么写，需要看项目给出的规范，如代码清单 xx 就是一个例子。

/**
* @file        demo.js
* @version     v1.2.0
* @author      Tom
* @updateTime  2015-06-09
* @description 这是一个示例的 JavaScript 脚本文件。
* @license     MIT License
*/

这个例子写出了 demo.js 文件的版本、作者、更新时间、文件功能描述、代码许可协议（相当于授权类型，后面会讲到）。
在一些重要的函数上，也会有类似代码清单 xx 的一些文档注释，我们在后面讲到函数时会顺带一提。
3.3.3 变量
认识变量，是进入编程世界的第一步。有人总结编程的过程其实就是数据的流动，而著名的计算机科学家尼古拉斯·沃斯提出的大名鼎鼎的、总结了编程的本质的公式 程序 = 数据结构 + 算法，也足以窥见数据的重要性。数据结构是是计算机中存储、组织数据的方式，而数据的载体是变量。

var x, y, z;
x = 54;
y = 49;
z = x + y;
alert(z); // 弹窗会显示 103

代码清单 xx 是一个很简单的例子，就像数学中的未知量一样，我们在第一行定义了三个未知量， x、 y、 z，这个操作叫声明，下面的代码则为它们赋值、运算。 var 是 JavaScript 中的关键字，可进行赋值操作，将等号右侧的数据存入等号左侧的变量，而像 x、y、z 叫做标识符或变量名。
当然，我们也可以在声明时就赋值，如代码清单 xx。

var x = 54;
var y = 49;
var z = x + y;
alert(z); // 弹窗会显示 103

不过变量不同于未知量。变量的值是可以改变的，它并不是代表了数据，而是数据的容器。举个例子，心情是很容易变化的，那么我们可以定义一个变量来储存我们的实时心情（mood），如代码清单 xx 所示。

var mood;
mood = 'happy';
alert(mood);
mood = 'sad';
alert(mood);
mood = 'boring';
alert(mood);
// 弹窗弹了三次，分别显示 happy、sad、boring

3.3.4 数据类型
请注意，在上面的公式 程序 = 数据结构 + 算法 中指的是“数据结构”，而这里是“数据类型”，这是两种截然不同的概念！
数据类型，是指变量的值的类型。上面例子里， x = 54 的数据类型是数值， mood = 'happy' 的数据类型是字符串。除此之外，还有一种很神奇的叫布尔值的数据类型，只有两种值， true 和 false，即真和假，如代码清单 xx 所示。

var isBoy = true;
var isStudent = false;

布尔值类型是 JavaScript 中最很重要的数据类型，现在我们无法感受到布尔值的作用，但在后面我们会逐渐感受到。有了布尔值，JavaScript 就能完成复杂的编程任务了。
当然，JavaScript 中的数据类型也十分丰富，现在笔者逐一介绍它们。
（1）数值
JavaScript 中的数值非常强大和自由，对于其他编程语言的程序员，如何处理数值是最头疼的事情之一，尤其是涉及到小数上，但在 JavaScript 这里却简单轻松多了，因为 JavaScript 在声明变量时无需考虑诸如其他编程语言中整型、浮点型等概念。想赋什么值直接在等号右侧写就行，随心所欲！
代码清单 xx 是关于数值的一些简单类型的汇总，以及使用 Math 对象的方法对它们取整的例子。

var year = 2024;  // 年份，整数
var height = 178.6;  // 身高，小数（也叫“浮点数”）
var pi = 3.1415926;  // 圆周率，很多位数的小数
var temperature = -5.69  // 温度，零下 5.69 摄氏度，一个负值小数

/* 下面是四种对 pi 的取整方式 */
alert(Math.trunc(pi));  // 输出 3（去除小数部分）
alert(Math.floor(pi));  // 输出 3（向下取整，对正值的转化和“去除小数部分差不多”）
alert(Math.ceil(pi));   // 输出 4（向上取整），
alert(Math.round(pi));  // 输出 3（四舍五入，这个比较常用）

当然，数值不止这些，上面都是十进制，除了十进制，JavaScript 还支持原生的 二进制（前缀 0b）、八进制（前缀 0o）、十六进制（前缀 0x）的数值，如代码清单 xx 所示。这些用的比较少，不过也可以作为了解，以备不时之需，像十六进制，我们 CSS 里讲过颜色可以使用十六进制表示法，那么我们使用 JavaScript 生成颜色数值时，这个“十六进制数值”就显得很有用了。

var binary_num = 0b10000;  // 32 的二进制
var hexadecimal_num =  0xf;  // 15 的十六进制
var octal_num = 0o10;  // 8 的八进制
alert(octal_num);  // 弹窗显示 8（注意，这些数值在输出时，是以十进制格式输出的）
alert(0o10 + 8);  // 弹窗显示 16（不同进制的数是可以直接进行运算，无需格式转换）

那现在就出现两种转化问题了：十进制转其他进制、其他进制转十进制。
十进制转其他进制：很简单，使用 JavaScript 内置的 toString() 函数即可，这是一个“两用”的函数，在没有参数的情况下，它的功能是“强制转换成字符串”，当加上一个数字作为参数时，它就可以将十进制数转换为其他进制数了，如代码清单 xx 所示，只是输出结果为没有“进制前缀”的字符串格式而不是数值格式（换言之，无法直接进行数学运算）。

/* 十进制转二进制 */
var my_num = 1024;
var my_num_bin = my_num.toString(2);  // 获取 1024 的二进制数值的字符串
alert(my_num_bin);  // 弹窗显示 10000000000

其他进制转十进制：如果是其他进制数值格式，那么在输出时是直接以十进制输出的（参考代码清单 xx），如果是没有前缀的字符串格式，可以使用 parseInt() 函数，如代码清单 xx 所示，请注意，它只支持整数，不支持小数！

/* 二进制转十进制 */
var my_num_bin_str = '10000';  // 声明一个二进制数的字符串
var my_num_10 = parseInt(my_num_bin_str, 2);  // 转化为十进制数值的字符串
alert(my_num_10);  // 弹窗显示 16

代码清单 xx 中 parseInt() 有两个参数，第一个是我们给定数值的字符串，第二个是我们给定数值的字符串里这个数值是多少进制的，因为例子中是二进制，所以我们写成 2，如果我们想转换八进制，则可以写成 8，如 parseInt('f', 16) 等价于 15 数值、 parseInt('100', 8) 等价于 64 数值。
另外，数字还有一个无穷大的概念，我们在前面 CSS 入门阶段绘制“半圆圆角矩形”时，在注视中简单提过 CSS 里的 infinity，也就是无穷大的英文，在 JavaScript 中同样有这个概念， Infinity 也是个数值，和 0、 0xf 一样，只是比较样子比较特殊。
（2）字符串
相较数值，字符串（string）更为实用！它由使用引号包裹的零个或多个字符组成。引号有两种，半角单引号 ' 和半角双引号 "，两种都可以，但两者组合使用时， JavaScript 只会识别最外层的那个双引号为字符串的边界，就像我们写作文时使用的双引号和单引号一样，我们应该避免两者冲突，如代码清单 xx 所示，我们需要使用两种引号。

/* 单双引号混用的案例 */
var html_str = '<input type="button" value="按钮" />';
alert(html_str);  // 弹窗显示 <input type="button" value="按钮" />

顺带一提，在实际开发中，有一个有趣的现象：定义字符串时，笔者发现使用单引号 ' 来包裹字符串内容的人比较多，一方面看起来比较干净，不用频繁按动 shift 键，另一方面由于前端经常有向字符串中引入 HTML 标签的场景，而 HTML 标签中约定俗成的属性值是使用双引号的，而在 JavaScript 中使用单引号会比较方便。这个没有对错，我们可按照各自的喜好来选择，在团队开发时应注意协商，尽可能保持一致。
可是，在一些情况下，两种符号还是不够用，如代码清单 xx 所示，此时我们会犯难，这该怎么“包裹”？

/* 这个时候发生冲突了！
最外面包裹单、双引号都不合适，现在该怎么办呢？ */
var html_str =
'<input type="button" value="按钮" onclick="alert('你好！')" />';

这个时候可以使用反斜杠 \ 进行转义操作，我们可以把字符串内的所有引号都使用反斜杠进行转义，这样程序就能正常运行了。如代码清单 xx 所示。

/* 内部属于字符串的引号全部使用反斜杠转义后，就解决冲突问题了！ */
var html_str = 
'<input type=\"button\" value=\"按钮\" onclick=\"alert(\'你好！\')\" />';
alert(html_str);
// 弹窗显示 <input type="button" value="按钮" onclick="alert('你好！')" />

这个地方的反斜杠转义可以让后面紧邻的引号变为一个普通字符，而不是 JavaScript 中的字符串语法组成部分。现在继续深究，有意思的来了！如果我们想显示一个反斜杠呢？这个也简单，写两个反斜杠 \\ 就行了，如代码清单 xx 所示。

var backslash_str = '一个反斜杠 \\';
alert(backslash_str);  // 弹窗显示 一个反斜杠 \

但反斜杠的作用可不止这么简单，它可以在字符串中容纳更多内容，比如八进制 ASCII 码、十六进制的 ASCII 码、Unicode 转义序列，不过这些内容有些超纲且不实用，我们了解一下即可，如代码清单 xx 所示。

alert('\110\145\154\154\157\041');  // 弹窗显示 Hello!（ASCII 码八进制编码）
alert('\x48\x65\x6c\x6c\x6f\x21');  // 弹窗显示 Hello!（ASCII 码十六进制编码）
alert('\u4f60\u597d\uff01');  // 弹窗显示 你好！（Unicode 转义序列）

看起来很神奇！不过原理也很简单，只是使用反斜杠将一些不同进制的字符集编码号码转义了一下而已。至于后面的代码怎么来的，我们可以在互联网上搜索“ASCII 码对照表”和“Unicode 码点”对我们需要的字符进行查询，这里不再过多介绍。
但是有一个转义知识点需要我们烂熟心底，那就是 \r\n，这是一个换行的转义字符。在之前，我们可能认为认为字符串的内容是处于一行，没有“换行”、“多行”这些概念，这是一个误解。虽然我们无法在 JavaScript 程序里的字符串中直接回车换行，但我们使用转义字符是可以把换行信息嵌入其中的。如代码清单 xx 和图 xx 所示：字符串其实也是可以换行的。

alert('春江潮水连海平，\r\n海上明月共潮生。');

（占位图片）
很奇怪，为什么是 \r\n 这样奇怪的组合？这是因为不同操作系统对换行操作格式的“口径不一”，为了兼容不同操作系统使显示效果一致，综合考虑，这两个应该一起用（注意，顺序也不能搞反）。这个知识点在实际工作中，经常会用到！
还记得我们刚刚学过的“数值”吗？我们在进行转换的过程中，会产生一些“凝固”成字符串格式的“数字”。如 '0o54'、 '0xa9'、 '54'。那怎么还原成数值呢？很简单，除了上面刚学过 parseInt() 外，还有一个很简单的“一元加号运算符”转换法。格式如： +'100'，它和数值 100 是等价的。案例如代码清单 xx 所示。

var num_str = '100';
var to_num = +num_str;
var add_test = to_num + 80;
alert(add_test);  // 弹窗显示 180（字符串已经成功转换）
alert('100' + 80);  // 弹窗显示 10080（字符串和数值使用加号运算，两者内容会拼接）

（3）布尔值与简单的 if 语句
我们上面见到的 true 和 false 都是如 var 的 JavaScript 语言关键字，非数值也非字符串，这两个关键字就是布尔值（boolean）。布尔是数学上的一个概念，其命名“布尔”是为纪念布尔代数的奠基人，19 世纪英国数学家乔治·布尔。
程序的运行经常需要逻辑判断，最容易想到的是 JavaScript 中的 if （如果）语句（也称条件语句）。比如根据外面有没有下雨判断出门需不需要带雨伞，如代码清单 xx 所示。这也是布尔值最经典的用处，计算机程序是一种“逻辑语言”，是很理性的，没模棱两可，直接给定一个非黑即白的概念，大大使程序的格式简洁、高效。

var isRaining = true;
if(isRaining){  // 如果为真（true）
alert('下雨了，出门带雨伞！');
} else {  // 否则
alert('没下雨，出门无需带雨伞！');
}

代码清单 xx 中程序的运行结果显然是弹窗显示“下雨了，出门带雨伞！”，如果我们把布尔值改为 false，则是另一条结果。就像一个岔道路口，由 JavaScript 解释器根据这个信息选择程序下一步走哪条道。
JavaScript 中的很多语法都需要用到布尔值，不过归根结底核心思想就是如上面“下雨”例子的走岔道口。当然，布尔值也不是那么单纯，它其实是一种如“是的”、“有”、“完成”的概念，它几乎无处不在，怎么理解呢？有时候我们的一些变量里没有写 true 或 false，但它其实也会蕴含布尔值。
首先是刚学过的数值和字符串，即使没有看到 true 或 false，它们也可看做一种布尔值。以下是三种比较简单的场景，它们的布尔值为 false。
1、只声明了变量而未赋值。
2、一个数值变量，值为 0 或 -0。
3、一个字符串变量，值是一个空的字符串。
如何验证呢？如代码清单 xx 所示。

var unassigned;  // 未赋值的变量
if(unassigned){ alert('这是 true'); } else { alert('这是 false'); }
var zero = 0;  // 值为零的数值变量
if(zero){ alert('这是 true'); } else { alert('这是 false'); }
var empty_str = '';  // 值为空字符串的字符串变量
if(empty_str){ alert('这是 true'); } else { alert('这是 false'); }

运行结果很显然，是三个显示内容为“这是 false”的弹窗。如果我们将上面的数值变量的值改为其他数值，比如 1、 18，以及上面的字符串变量改为非空字符串，比如 'hello'，那么结果就会变成内容为“这是 true”的弹窗。
不过上面的三个例子在实际生产环境中与布尔值的联系并不紧密（而且也有点绕脑子），论紧密，还得是数值和字符串与“比较操作符”和“逻辑操作符”的组合，下面我们来学习一下。
（3.5）比较操作符
下面来看这样一组读起来匪夷所思的程序，如代码清单 xx 所示。

var a, b;
a = a === b;
alert(a);  // 弹窗显示 true

如何理解呢？为什么 a 值变成了一个布尔值 true？
其实后面的 === 是一个比较操作符， a === b 的含义是：比较一下 a 和 b 是否值和值的类型都相等，如果相等，返回 true（也就是 a === b 等价于 true），否则返回 false。在这个例子中，很显然，变量 a 和 b 的值和类型是相同的（都是没有被赋值的“光杆儿变量”），因此两者相同，返回 true。
之后返回的这个 true 的布尔值就会被赋予最左侧的变量 a。现在 a 的值就是 true 了。
这是一种比较操作符，用的比较多，下面我们来了解一下常用的比较操作符，如表 xx 所示。

比较运算符	比较运算符名称	比较运算符描述
==	相等运算符	（不推荐使用）a == b，判断 a、b 值是否相等
!=	不相等运算符	（不推荐使用）a !== b，判断 a、b 值是否不相等
===	严格相等运算符	a === b，判断 a、b 值和类型是否都相等
!==	严格不相等运算符	a !=== b，判断 a、b 值和类型是否都不相等
>	大于运算符	a > b，判断 a 是否大于 b
>=	大于或等于运算符	a >= b，判断 a 是否大于或等于 b
<	小于运算符	a < b，判断 a 是否小于 b
<=	小于或等于运算符	a <= b，判断 a 是否小于或等于 b

现在我们明白 a = a === b; 的含义了，当然，这样写代码阅读起来是不舒服的，如果我们加上括号就好很多了，如 a = (a === b);，JavaScript 语法中允许加括号，和数学中的括号一样，能改变代码表达式里运算过程的优先级和使阅读更明了。
在上面表格中有个很重要的知识点，即表格中使用“不推荐使用”标注的两个比较符为什么不推荐使用？ == 和 === 有什么区别？按照表格的描述，一个是判断两者值是否相等，一个是判断值和类型是否相等，也就是说 === 多了一个类型判断，我们来看这样一个例子就明白了，如代码清单 xx 所示。

/* “相等”和“严格相等”的区别 */
var a = 1;
alert(a == true);  // 弹窗显示 true
alert(a === true);  // 弹窗显示 false

我们刚才学布尔值时，了解过“一个数值变量”同时也是“一个布尔值”，显然 1 == true，它反应出来的布尔值也是 true，但 1 是数值， true 是布尔值，两者的类型并不一样，所以 1 === true 反应出来的布尔值是 false。
这是一个陷阱，在真实生产环境中我们绝对是用不到 == 的，因为这个实在非常反直觉，所以在需要判断两个值是否相等时，请直接使用 ===。
而像“大于”或“小于”这种比较运算符则很容易理解，如代码清单 xx 所示。

var x = 10;
var y = 20;
if(x < y){
alert('true');
}
// 弹窗显示 true

得益于 JavaScript 近乎“病态”的“自由语法”，这些简单的比较大小的比较运算符，也有两个永远也用不到的小知识点。虽然用不到，但也值得了解一下，防止未来潜在的“踩坑”。如代码清单 xx 所示。

/* 案例一：在比较运算中，字符串可能会被转换为数字 */
var x = 10;
var y_str = '20';
alert(x < y_str);  // 弹窗显示 true
/* 案例二：字符串中的字符也可以比较，比较依据是 Unicode 码点 */
var a_str = 'x';
var b_str = 'y';
alert(a_str < b_str);  // 弹窗显示 true

其实在 JavaScript 中万物皆可比较。上面两个案例介绍了“数字”和“字符串”、“字符串”和“字符串”的“大小比较”，前者，JavaScript 会在比较操作时尽可能将字符串转化为数值类型，然后进行比较。后者，则根据该字符串中的字符在 Unicode 码点中的位置前后进行比较，每个字符在 Unicode 码点中都是一个数值， x 的 Unicode 码点是 120， y 的 Unicode 码点是 121。（如果字符串内有多个字符，则从前向后挨个进行比较，第一个字符相同则比较第二个，以此类推）。
像这些匪夷所思、反常识、不实用的知识点案例，布满在 JavaScript 语法的方方面面，甚至很多公司为了筛选更精通的人才，也会出相应的面试题。从程序语言角度看，笔者认为这是 JavaScript 的“防呆设计”，这门程序的解释器根据规范的设计，会尽可能理解程序员想表达的意图，使程序少报错、顺利运行。但正常的实际生产环境里，我们真的用不到，并且还可能因此掉入陷阱。
现在，比较操作符中还剩下一个感叹号 !，这个其实也是一个逻辑操作符，它可以以 !== 形式使用，也可以单独使用，是我们在布尔判断时最常用到的符号。如代码清单 xx 所示。

var isOpen = true;
var isClose = !isOpen;
if(!isClose){ // 等价于 if(isClose !== true) 或 if(isClose === false)
alert('isOpen 的值为 true');  // 弹窗将会显示
}

可以看得出， ! 是一个取反的操作符， !true 等于 false，而 !!ture 就还等于 true。
这个时候，有个有意思的知识点， !! 会对后面的变量或值取反再取反的操作，那我们对一个数值或字符串也这样“取反再取反”会如何呢？如代码清单 xx 所示。

var a = 'Hello!';
var b = !!a;
alert(b);  // 弹窗显示 true

非常神奇，一个普普通通的字符串值，竟然变成了一个真正的布尔值，这个 !! 叫“双重逻辑非”，它可以将一串字符串进行两次取反的逻辑运算，使其变成它的布尔值（显而易见， !!'' 或 !!0 等同于 false）。
现在我们以 ! 为“引子”，来了解一下的逻辑（布尔）操作符世界。
（3.6）逻辑（布尔）操作符和三元运算符
程序中经常需要各种逻辑判断，简单的逻辑语言组合到一起，会使程序接近人们的理性决策流程，以此可以解决很复杂的逻辑问题，这一点我们在解数学难题时候能强烈感受到，学习编程也一样。
在 JavaScript 中有三种逻辑操作符， !、 &&、 ||，分别叫“取反”、“且”、“或”。
! 是取反操作符：能将“真”变成“假”、将“假”变成“真”，显然 !true 的运算结果为 false。
&& 是“且”操作符：如 a && b。当 a 等于 true 且 b 也等于 true 时，即两者都为 true 时，该表达式的运算结果等于值 true（这个是在“布尔值”的层面上，下同），其余情况（比如 a 是 true、 b 是 false）都是 false。
|| 是“或”操作符：如 a || b，和上面的“且”操作符不同，这个“或”只要 a 或 b 有一个为 true，则该表达式的运算结果就等于值 true。
当然，请注意一个很有趣的细节，大家尝试理解一下：为了性能需要，JavaScript 引擎在解析 a || b 时，如果发现前者 a 的值为 true，则该表达式直接返回 true，不会再尝试读取 b 的值（毕竟是否读取，返回的结果都一样是 true），这个知识点很重要，如果后者是一个函数的话，如 true || func()，那么要注意， func() 永远不会被调用。
代码清单 xx 是对这三种逻辑操作符的简单使用。在代码中，我们可发现逻辑操作符可以用在赋值和判断上。

代码清单 xx
var isStart = false;
var valueA, valueB;
if(!isStart){  // 当 isStart 为 false 会执行下面的语句
valueA = true;
valueB = false;
isStart = !isStart;  // 将 isStart 的值改为 true
}
if(isStart && valueA){  // “与”操作符使用案例
alert('现在，isStart 和 valueA 的值都是 true！');
}
if(valueA || valueB){  // “或”操作符使用案例
alert('现在，valueA 和 valueB 至少有一个是 true！');
}

不过，赋值和判断还可以使用一种更简单、直观的方式来进行，这是一种“三元运算符”，也称为“条件运算符”（通常，“三元运算符”就是指“条件运算符”）。
一元：指该结构有一个运算子（表达式），刚才我们学过一元加号运算，如 +'100' 会使字符串 '100' 转化为数值 100。这是一种一元运算，如 !isStart 也是一种一元运算。
二元：有两个运算子，比如我们代码清单 xx 中的 isStart && valueA，以及之前学过的 a === true。
三元：需要三个运算子，比如我们现在要学到的条件运算符，它由 ?: 两个符号分割三个运算子 (条件表达式 ? 表达式 1 : 表达式 2 ) ，如 a ? b : c。当 a 为 true 时，这个例子就会等于 b，反之等于 c，和代码清单 xx 的效果差不多。

var result = (a ? b : c)
// 和下面的程序效果一样
var result;
if(a == true){  // 没错，这里使用两个等号，因为不要求 a 的类型也为布尔值
result = b;
} else {
result = c;
}

当然功能上它确实像一个迷你 if 语句，但我们务必注意，if 语句本质上是程序的语法，而三元运算符本质上是一个表达式，更强大一点，表达式是肯定会有一个运算式结果，而 if 语句并无此需求。
这个三元运算符一般被用于快速赋值，毕竟如我们所见，使用 if 需要好几行才能表达的内容，三元运算符可以很优雅的搞定，当然，不仅限于赋值，三元运算符也可以作为一个迷你 if 语法来使用。这个三元运算符我们经常会用到，可读性很棒，我们一定要牢牢记住。
但顺便一提，类似三元运算符， && 也可以成为一个二元运算符，组成一个迷你的 if 语句。如代码清单 xx 的第二行和第三行所示。

var a = false, b = true;
a && alert('a 为真！');
b && alert('b 为真！');
// 上面两行，和下面的程序效果一样
if(a){
alert('a 为真！');
}
if(b){
alert('b 为真！');
}
// 当然，和下面的效果也一样（if 的缩写格式）
if(a) alert('a 为真！');
if(b) alert('b 为真！');

对照下面几行使用 if 的达到相同效果代码，我们很容易理解 && 在这里的作用。然而很可惜，这样使用 && 的可读性非常糟糕，而且实际上 if 语句也有简写，如代码清单 xx 最后两行所示，所以我们基本上不会这样使用 && ，但注意，当我们在阅读其他人的代码时，一定要能读懂这种语法。
现在我们来更深了解一下关于 && 和 || 的内容：在上面关于 && 和 || 的解释中，我们会认为使用它们的表达式只会返回 true 或 false，实际上并不是，它们返回的可不是布尔值，而是两（多）者当中的某个值（不仅是两个，多个也可以）。这就不得不提 JavaScript 语法上的“精妙”了。
这个知识点很重要，但我们很容易在直觉上忽略这个知识点。如代码清单 xx 所示。

// 四个值中，只有 d 的布尔值是 ture
var a = '', b = false, c = 0, d = 'hello';
alert(d && c && b && a);  // 弹窗显示 0（而不是 false）
alert(a || b || c || d);  // 弹窗显示 hello（而不是 true）

在这个例子中，我们可以发现，原来 && 和 || 返回的是值，而不是像数学里那样，进行“且”、“或”逻辑处理后的布尔值。至此，我们可以来总结 && 和 || 的原理了：
前者“且”操作符 &&，其实就是将多个值（如例子中的变量 a、 b、 c、 d）从前到后挨个进行判断，遇到可判断为 false 的就将其原值返回（比如上面例子中返回了 0），如果都为 true，则返回最后一个，如代码清单 xx，最终该表达式等于变量 b 的值。

var a = '', b = 'hello';
alert(a && b);  // 弹窗显示 hello

相同道理，“或”操作符 || 恰好相反，是从左到右取挨个判断哪个值为 true。这个判断方式实在是非常聪明，根据这个规则，在 if 语句中的条件判断语句中就可以实现数学里逻辑学上的“且”和“或”的效果了。
然而，还没完，“或”操作符 || 可以根据这个底层原理，实现一个非常实用的小技巧！如代码清单 xx 所示。

name = name || 'john';
// 和下面的程序效果一样，但看起来更简便
if(!name){
name = 'john';
}

有时候，我们无法通过程序上下文和实际运行过程中，确定某个变量是否被赋值，那么我们就可以使用“或”操作符 || 来“智能”处理这个问题，若一个变量已被赋值，那么程序自然向下运行，如果没有，则为其赋予一个其他的值。
这个组合，在 JavaScript 程序中经常会用到，虽然使用 if 语句也可以轻松做到相同效果，但使用“或”操作符的这个组合显然更直观。
（3.7）算术运算符
程序中经常会遇到数学运算，那么就需要用到算术运算符了。
在程序中，常用到的算数运算符有五个，加减乘除和取模（也叫取余数），除此之外还有不太常用的指数算数运算符。常用符号如表 xx 所示。

符号	示例	名称及含义
=	x = 10	赋值运算符，将等号右侧的值赋予给左侧的变量，现在 x 的值为数值 10
+	x + y	加法运算符，可返回 x 与 y 的和
-	x - y	减法运算符，可返回 x 与 y 的差（也可以当负号使用，如 -x 就等于 x * (-1)）
*	x * y	乘法运算符，可返回 x 与 y 的积
/	x / y	除法运算符，可返回 x 与 y 的商
%	x % y	余数运算符，可返回 x 与 y 的模（余数），如 10 % 4 的结果为 2
**	x ** y	指数运算符，可返回 x^y 的结果，如 2 ** 10 的结果为 1024
( )	( x + y ) * z	圆括号，也叫分组运算符，可以控制算术表达式中运行的优先级

最常用的是加法运算符 +，它不仅可以参与数学四则运算中的加法，还可以拼接字符串。当然，有时候这两个用处会冲突，那么我们可以使用小括号来解决这个问题。如代码清单 xx 所示。

alert('字符串拼接：' + 5 + 8 + '，算术运算：' + (5 + 8));
// 弹窗显示：字符串拼接：58，算术运算：13

同样是 5 和 8 两个数值，前者直接以字符串形式拼接成 58，后者才实现加法运算，输出 5 和 8 的和 13。
在 JavaScript 中，表达式里的各种操作都按一定的优先级来进行，就如在 x = x === true 中 x === true 的优先级比等号要大，在 x = a + b * c 的 b * c 的优先级更大（也符合四则运算）， 优先级大的会先执行。当然，我们只需记住，圆括号的优先级是最大的就行！所以，在一些我们需要优先执行的部分，直接加一个圆括号即可。
至于余数，我们在数学运算中可能用的比较少，但在程序上经常会用到，因为很多程序会用到各种复杂的算法，算法是数据的流动，分割数据是编写程序时我们的常规操作，其中余数 % 必不可少。现在我们来编写一个简单的程序，比如知道一段时间的毫秒数（1 秒 = 1000 毫秒），将其转化为时分秒格式，如代码清单 xx 所示。

var msTimeValue = 12344321;
var hour = parseInt(msTimeValue / (1000 * 60 * 60));
var min = parseInt(msTimeValue / (1000 * 60) % 60);
var sec = parseInt((msTimeValue / 1000) % 60);
alert('该毫秒数处理后的结果为：' + hour + ' 时 ' + min + ' 分 ' + sec + ' 秒');
// 弹窗显示：该毫秒数处理后的结果为：3 时 25 分 44 秒

计算“小时数”比较简单，一小时是 (1000 * 60 * 60) 毫秒，也就是 3, 600, 000 ms，直接相除就行了。
而计算分钟，则需要先算出这段时间的总分钟数，和计算小时一样，一分钟是 (1000 * 60) 毫秒，直接相除就得出来了，但因为每满 60 分钟会归类为一个小时，所以这里显示的分钟数实际上需要取余。秒数和分钟同理。
在程序编写时，经常会遇到数值加一的情况，如 x = x + 1;，在语法上也存在关于它们的缩写格式，称为自增和自减。如代码清单 xx 所示。

var x = 0;
x++;
++x;
x = x + 1;
x += 1;
alert(x); // 弹窗显示 4（上面四个操作均实现了自增）
x--;
--x;
x = x - 1;
x -= 1;
alert(x); // 弹窗显示 0（上面四个操作均实现了自减）

这是四种自增和自减的情况，其中 x++、 x-- 这些这些称为“自增运算符”和“自减运算符”，此外， x += 1 也可以实现相同的效果。
那么变量放在自增（减）运算符前面和后面有什么区别呢？这个可以从赋值操作上看到答案。

var x = 0;
var type1 = x++;
var type2 = ++x;
alert('x:' + x); // 弹窗显示 x:2
alert('type1：' + type1 + '，type2：' + type2); // 弹窗显示 type1：0，type2：2

其中赋予变量 type1 的值，是未经过自增后的 x，而赋予变量 type2 的值，是经过自增后的。即两者的“自增”、“数值返回”两个步骤先后顺序不一样。 x++ 是先返回数值，后自身增加 1，因此变量 type1 的值是 0，而 ++x 是先自身增加 1，然后再返回值，此时 x 的值已经是 2 了，所以变量 type2 的值为 2。
上面是算术运算符的简单部分，其实还有硬核部分 ---- 二进制的算数操作，也叫二进制位运算符。下面的内容我们在实际使用中可能用不到，但简单了解一下还是有必要的。我们需要知道，这些运算是一种很偏向计算机底层的运算，坏处是很抽象，需要一定的数学知识，好处是运算速度很快。表 xx 就是 JavaScript 中的二进制位运算符。

符号	使用示例	解释
|	0b1000 | 0b0100	“或”运算符，每个二进制位上两者只要有 1 则返回 1。示例结果为 12（即 0b1100 的十进制）。
&	0b1101 & 0b1011	“与”运算符，每个二进制位上两者只要有 0 则返回 0。示例结果为 9（即 0b1001 的十进制）。
~	~0b101111	“否”运算符，每个二进制位上 1 变 0、0 变 1（计算机底层数据储存上），示例结果为 -48（即 -0b110000 的十进制）。
^	0b1001 ^ 0b1111	“异或”运算符，每个二进制位上，相同则返回 0，不相同（异）则返回 1，示例结果为 6（即 0b0110 的十进制）。
<<	0b1100 << 2	“左移位”运算符，所有二进制位向左移动 2 位，尾部补 0。示例结果为 48（即 0b110000）
>>	0b1100 >> 1	“右移位”运算符，所有二进制位向右移动 1 位，正数头部补 0，负数头部补 1。示例结果为 6（即 0b110）
>>>	0b1100 >>> 1	“右移位”运算符（无符号型），所有二进制位向右移动 1 位，无论正负，头部皆补 1。示例结果为 6（即 0b110）

前四种是“逻辑位运算”，后三种为“移位运算”。我们在测试表 xx 的案例时，可以使用如代码清单 xx 中的代码格式来测试，利用我们刚才学到的 .toString() 函数，将结果翻译成不同进制来显示，以便更轻松地理解这些运算代码的含义。

var testCal = 0b1101 & 0b1011;
alert('二进制结果：' + testCal.toString(2));  // 弹窗显示：二进制结果：1001
alert('十进制结果：' + testCal.toString());  // 弹窗显示：十进制结果：9

请注意，在我们上面表格中列举的案例中，都是使用 0b 开头的“二进制数值”来演示的。那使用“十进制数值”行吗？当然可以。但是，二进制运算只能用于整数运算，如果我们使用带小数点的十进制数值，系统会将该数值先转化为整数，再进行运算。
当然，此时我们也发现了一个快速取整的小妙招，也就是使用“或”运算符 | 来取整一个数字。如代码清单 xx 所示。

var a = 3.67;
var b = 74.234;
var testCal01 = a | 0;  // 等同于 3 | 0
var testCal02 = b | 0;  // 等同于 74 | 0
alert("a 取整后为 " + testCal01);  // 弹窗显示：a 取整后为 3
alert("b 取整后为 " + testCal02);  // 弹窗显示：b 取整后为 74

原理很简单，二进制“或”运算符的原理是：每个二进制位上两者只要有 1 则返回 1。所以任何整数数值与 0 进行二进制“或”运算后，返回的结果都是它本身，如图 xx 所示。
（图，占位）
当然，这个取整的范围有限制，只能应用于 32 位整数范围内的数值，也就是 -2147483648 ~ 2147483647。在这个范围之外的数字使用这个办法取整，会导致错误的结果。
至于什么是 32 位整数数值？这个很有意思，我们在上面的表格中发现后两个运算符看起来功能很相似，都是向右移 n 位，但后者多了一个括号“无符号型”，这是怎么一回事呢？
计算机内部储存数字只有 0 和 1，并没有负数这个概念，以及负号 -，那么怎么才能让计算机储存一个负数，比如 -4 呢？如果是正数 4，在计算机内的储存是在一个 32 个二进制位的空间内储存的（32 bit），其内容如代码清单 xx 所示。

0000 0000 0000 0000 0000 0000 0000 0100  // 4 的二进制 100 在计算机内部的储存内容

那负数 4 呢？如代码清单 xx 所示。

1111 1111 1111 1111 1111 1111 1111 1100  // -4 的二进制，在计算机内部的储存内容

大家看到这里，可能是一头雾水，一个负数在计算机中的存储竟然是这样的！这个内容是怎么得来的？
原来，这个 32 bit 的空间里，第一位数值，是代表了符号位，这一位是很重要的，可以告诉计算机如何解析这串数值，0 代表这是一个正数，正常解析即可，1 代表这是一个负数，需要进行计算后，才能还原它的负数面貌。那么 1111 1111 1111 1111 1111 1111 1111 1100 是怎么来的呢？
这需要进行两个步骤。首先 -4 的绝对值是 4，那么 4 的二进制叫做“原码”，原码进行取反操作（所有二进制位里，1 变 0、0 变 1）后，得到“反码”，之后反码再加 1，就得到了“补码”，也就是上面我们列出的 -4 在计算机中的储存方式。如代码清单 xx 所示。

0000 0000 0000 0000 0000 0000 0000 0100 // 原码
1111 1111 1111 1111 1111 1111 1111 1011 // 反码
1111 1111 1111 1111 1111 1111 1111 1100 // 补码（即 32 位整数 -4 在计算机中的储存内容）

大家可能会疑惑，为什么要使用“反码”要加 1 后的“补码”来表示负数呢？直接使用“反码”来表示负数不行吗？这是因为如果使用反码，那数值 0 就有了两种表示方式了，比较浪费，所以科学家就设计“加一”创造了补码，将多出来的 0 送给了负数范围，这样就能多表示一个负数了。
（图片占位）
那么，既然能多表示一个负数，就意味着这种办法可以表示的数字范围并不是正负两边对称的，负数要比正数多一位。32 bit 由于第一位表示正负，真正存储信息的是后面的 31 位，那么 32 位数字表示法的取值范围是 -(2^31 + 1) 到 2^31，如代码清单 xx 所示。

-2,147,483,648 ~ 2,147,483,647  // 32 位数字表示法的取值范围

那么此时我们就可以解释在表 xx 中列出的最后两个二进制运算符“右移位”的区别了。
“右移位”是指所有二进制位向右移动，但因为有第一位“符号位”的存在，“符号位”并不是数值内容信息，只表示正负，所以现在就需要考虑，所有二进制位向右移动了 n 位后，左侧该怎么补全数字？
（4）strict、动态变量、void
（4.5）null、NaN、undefined
（5）赋值运算符
（5）正则表达式
（6）数组
你可以使用索引位置来访问字符串中的每个字符：
实例 var character = carname[7];
（7）对象
（8）typeof
它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。
JavaScript 本身不提供任何与 I/O（输入/输出）相关的 API，都要靠宿主环境（host）提供，所以 JavaScript 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。
已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node 项目。
3.3.5 数据的输出
3.3.6 函数
3.3.7 命名
3.3.8 异常处理
3.3.9 严格模式
ES5 和 ES6
BOM 和 DOM
掷骰子走步数游戏案例
JavaScript 的内置函数
Ajax
第四章 前端背后的故事：必备的技术背景
在本章中我们来了解一些前端技术背后的事情。这些内容可能对我们之后的学习工作中起不了太大的作用，但能让我们以更高的视角来看这片领域。
4.1 渲染引擎
首先我们需要了解一下浏览器的 “渲染引擎”（也叫 “浏览器内核”、“排版引擎”）。 渲染引擎是浏览器对 HTML 和 CSS 代码的解析器，它们负责解析代码、绘制界面，目前世界上比较成熟的有四个，按照流行度从大到小分别为 Webkit、Gecko、Trident 、Presto（基本废弃）。现在我们简单了解一下它们。
4.1.1 渲染引擎介绍
「图片 - 四大引擎」
Webkit 是一个开源的渲染引擎，目前主要被苹果公司开发的 Safari 浏览器使用。之前 Chrome 浏览器也在使用 Webkit ，后来谷歌公司基于 Webkit 又研制了 “Webkit 魔改版” —— Blink 渲染引擎（也叫 Chromium 内核）。如今 Blink 渲染引擎已经成为世界上最受欢迎的浏览器渲染引擎，如 Chrome 浏览器、国内很多国产浏览器、Windows 上的 Edge，还有 Opera 浏览器都在使用 Blink 渲染引擎。
Gecko 渲染引擎，由 Firefox 浏览器研发商 Mozilla 基金会开发并用在 Firefox 浏览器上。Firefox 浏览器因为其开源、配置自由度高、插件丰富，而且渲染质量出奇优秀，也有很大的用户量。
Trident 和 Presto，这最后两个引擎必须特地说一下，前者是多年来前端开发者的梦魇，而后者本来是一个相当优秀的选手，却不慎在浏览器大战中溃败，永远消失在互联网历史的长河里。
先说 Trident ，它有个别名，叫 “IE 内核”，没错，就是我们熟知的 IE 浏览器（Internet Explorer）的渲染引擎。 Trident 对代码的解析结果与最新的 W3C 标准差异很大，同时 IE 浏览器又是 Windows 系统的内置浏览器，潜在用户很多，这就导致很多时候开发者为了兼容 IE 浏览器，不得不面对同一个业务，还要再为 IE 浏览器量身打造一套代码，即使现在我们也会经常在一些资料上看到某个 CSS 属性不支持 IE、某个 JavaScript 写法不支持 IE 的警告。兼容 IE 是令开发者头疼，甚至愤怒的事情。
不过好消息是 2021 年微软发布的 Windows 11 系统不再内置 IE 浏览器了，而 2022 年 6 月 22 日，微软官方又正式宣布将停止支持 IE 浏览器，这也意味着开发者离挣脱 IE 浏览器那刻的到来越来越近！目前 IE 仍在一些对技术改动很敏感的高稳定性行业使用，比如银行系统，还有一些银行客户端，像“中国农业银行”的“农行K宝”，毕竟这类系统的特点是更新周期慢，更新代价也大，但随着时间发展，IE 终究会被所有行业淘汰。
Presto 是 2013 年以前 Opera 浏览器使用的渲染引擎，当时这个引擎的渲染反应速度很快，很受人们的喜爱，但 2013 年 Opera 浏览器官方却突然宣布放弃使用自己的 Presto 渲染引擎，转而使用 Blink 渲染引擎，并表示将与 Google 合作进行 Blink 渲染引擎的开发，虽然当时看起来这是个不理智的决定，但反观如今 Blink 几乎大统一天下的局面，对开发者和 Opera 的未来发展来看这个决定绝对利大于弊！现在 Presto 是基本废弃的渲染引擎，我们不再考虑对它的兼容性。
SEO
其他
作用不大，抬高视角
4.2 浏览器与网络技术基础
4.3 Web 前端的历史
第五章 复刻设计图的画笔：元素视觉属性
CSS3 与 CSS
第六章 CSS 世界的游戏规则：CSS 基础语法
权值
函数
动画
兼容性
媒体查询
替换元素与非替换元素
第七章 CSS 布局的底层思想：元素分类、盒模型、层叠规则
第八章 CSS 排版工具：定位与布局详解和响应式排版
边距折叠
层叠
shape 布局
负边距布局
栅格化布局
具有良好的屏幕兼容的二列布局
居中方式
第九章 让代码更漂亮：深入选择器和 CSS 代码规范
通配符
代码规范
第十章 CSS 方法组合的实例：实现复杂效果
统计表饼图
第十一章 拒绝混乱：CSS 代码架构和相关工具
结构分析
内部结构划分
工程优化
unset
CSS 与 JS 的优先级
代码风格
条件注释法
命名方式
友好注释法
低权重原则
查询网络文档的方式
第十二章 细节调整必备：CSS 的文字高级处理
基线及其历史
文本间距、行距、半间距
文本定位
相关的 CSS 属性
第十三章 善用浏览器：浏览器开发者工具的使用
第十四章 CSS 的未来
写作中的笔记
1. 文章里的图片添加上
2. 文章里的内嵌代码给搞完
3. 文章里的一些缺失的表格给弄上
4. 代码的缩进，尽可能修复一下

代码缩进，统一使用 2 个空格
